// RUN: split-file %s %t
// RUN: %eclair compile %t/program1.eclair --emit ast-transformed > %t/actual1.out
// RUN: diff %t/expected1.out %t/actual1.out

//--- program1.eclair
@def empty_output(u32) output.
@def unused_input(u32) input.
@def unused_internal(u32).
@def unused_rule(u32).
@def another_input(u32) input.

unused_internal(1).

unused_rule(x) :-
  another_input(x).

@def live1(u32) input output.
@def live2(u32) output.
@def live3(u32).
@def live4(u32) output.
@def live5(u32) input.
@def live6(u32).
@def live7(u32) output.
@def live8(u32) output.
@extern func(field1: u32) u32.
@extern func2(u32) u32.
@extern constraint(field1: u32).

live2(123).

live3(x) :-
  live2(x).

live4(x) :-
  live3(x).

live6(x) :-
  live5(x).

live7(x) :-
  live6(x),
  x = func(123),
  constraint(x).

live8(x) :-
  live6(x),
  func2(123) = x.

// NOTE: Rule with contradictions is tested in another file already.

//--- expected1.out
@def live1(u32) input output.

@def live2(u32) output.

@def live3(u32).

@def live4(u32) output.

@def live5(u32) input.

@def live6(u32).

@def live7(u32) output.

@def live8(u32) output.

@extern func(field1: u32) u32.

@extern func2(u32) u32.

@extern constraint(field1: u32).

live2(123).

live3(x) :-
  live2(x).

live4(x) :-
  live3(x).

live6(x) :-
  live5(x).

live7(x) :-
  live6(x),
  constraint(x),
  x = func(123).

live8(x) :-
  live6(x),
  func2(123) = x.
