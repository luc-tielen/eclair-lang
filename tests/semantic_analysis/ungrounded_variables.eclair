// NOTE: happy path is not tested, this is tested implicitly by running
// the compiler end-to-end in most other tests

// RUN: mkdir -p %t && sed s@TEST_DIR@%t@g %s > %t/input.test
// RUN: split-file %t/input.test %t

// RUN: %eclair compile %t/program.eclair 2> %t/top_level_facts_actual.out
// RUN: diff %t/top_level_facts_expected.out %t/top_level_facts_actual.out

//--- program.eclair
@def edge(u32, u32) output.

edge(a, 1).
edge(2, b).
edge(c, d).
edge(e + 1, 1 + f).

//--- top_level_facts_expected.out
[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program.eclair@3:6-3:7
     │
   3 │ edge(a, 1).
     • ┬────┬─────
     • │    ╰╸ The variable 'a' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • ╰╸ This contains no clauses that refer to 'a'.
     •
     │ Hint: Use the variable 'a' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program.eclair@4:9-4:10
     │
   4 │ edge(2, b).
     • ┬───────┬──
     • │       ╰╸ The variable 'b' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • ╰╸ This contains no clauses that refer to 'b'.
     •
     │ Hint: Use the variable 'b' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program.eclair@5:6-5:7
     │
   5 │ edge(c, d).
     • ┬────┬─────
     • │    ╰╸ The variable 'c' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • ╰╸ This contains no clauses that refer to 'c'.
     •
     │ Hint: Use the variable 'c' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program.eclair@5:9-5:10
     │
   5 │ edge(c, d).
     • ┬───────┬──
     • │       ╰╸ The variable 'd' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • ╰╸ This contains no clauses that refer to 'd'.
     •
     │ Hint: Use the variable 'd' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program.eclair@6:6-6:7
     │
   6 │ edge(e + 1, 1 + f).
     • ┬────┬─────────────
     • │    ╰╸ The variable 'e' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • ╰╸ This contains no clauses that refer to 'e'.
     •
     │ Hint: Use the variable 'e' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program.eclair@6:17-6:18
     │
   6 │ edge(e + 1, 1 + f).
     • ┬───────────────┬──
     • │               ╰╸ The variable 'f' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • ╰╸ This contains no clauses that refer to 'f'.
     •
     │ Hint: Use the variable 'f' as an argument in a relation.
─────╯
//--- program2.eclair

// RUN: %eclair compile %t/program2.eclair 2> %t/ungrounded_var_in_rule_actual.out
// RUN: diff -w %t/ungrounded_var_in_rule_expected.out %t/ungrounded_var_in_rule_actual.out

@def edge(u32, u32) input.
@def reachable(u32, u32) output.

reachable(x, z) :-
  edge(x, y).

reachable(a, b) :-
  edge(x, y).

//--- ungrounded_var_in_rule_expected.out
[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@8:14-8:15
     │
   8 │ ╭┤ reachable(x, z) :-
     • │               ┬
     • │               ╰╸ The variable 'z' is ungrounded, meaning it is not directly bound as an argument to a relation.
   9 │ ├┤   edge(x, y).
     • │
     • ╰╸ This contains no clauses that refer to 'z'.
     •
     │ Hint: Use the variable 'z' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@11:11-11:12
     │
  11 │ ╭┤ reachable(a, b) :-
     • │            ┬
     • │            ╰╸ The variable 'a' is ungrounded, meaning it is not directly bound as an argument to a relation.
  12 │ ├┤   edge(x, y).
     • │
     • ╰╸ This contains no clauses that refer to 'a'.
     •
     │ Hint: Use the variable 'a' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program2.eclair@11:14-11:15
     │
  11 │ ╭┤ reachable(a, b) :-
     • │               ┬
     • │               ╰╸ The variable 'b' is ungrounded, meaning it is not directly bound as an argument to a relation.
  12 │ ├┤   edge(x, y).
     • │
     • ╰╸ This contains no clauses that refer to 'b'.
     •
     │ Hint: Use the variable 'b' as an argument in a relation.
─────╯

[error]: Found unconstrained variable
     ╭──▶ TEST_DIR/program2.eclair@8:14-8:15
     │
   8 │ ╭┤ reachable(x, z) :-
     • │               ┬
     • │               ╰╸ The variable 'z' only occurs once.
   9 │ ├┤   edge(x, y).
     • │
     • ╰╸ This rule contains no other references to 'z'.
     •
     │ Hint: Replace the variable with a wildcard ('_').
     │ Hint: Use the variable in another rule clause.
─────╯

[error]: Found unconstrained variable
     ╭──▶ TEST_DIR/program2.eclair@9:11-9:12
     │
   8 │ ╭┤ reachable(x, z) :-
   9 │ ├┤   edge(x, y).
     • │            ┬
     • │            ╰╸ The variable 'y' only occurs once.
     • │
     • ╰╸ This rule contains no other references to 'y'.
     •
     │ Hint: Replace the variable with a wildcard ('_').
     │ Hint: Use the variable in another rule clause.
─────╯

[error]: Found unconstrained variable
     ╭──▶ TEST_DIR/program2.eclair@11:11-11:12
     │
  11 │ ╭┤ reachable(a, b) :-
     • │            ┬
     • │            ╰╸ The variable 'a' only occurs once.
  12 │ ├┤   edge(x, y).
     • │
     • ╰╸ This rule contains no other references to 'a'.
     •
     │ Hint: Replace the variable with a wildcard ('_').
     │ Hint: Use the variable in another rule clause.
─────╯

[error]: Found unconstrained variable
     ╭──▶ TEST_DIR/program2.eclair@11:14-11:15
     │
  11 │ ╭┤ reachable(a, b) :-
     • │               ┬
     • │               ╰╸ The variable 'b' only occurs once.
  12 │ ├┤   edge(x, y).
     • │
     • ╰╸ This rule contains no other references to 'b'.
     •
     │ Hint: Replace the variable with a wildcard ('_').
     │ Hint: Use the variable in another rule clause.
─────╯

[error]: Found unconstrained variable
     ╭──▶ TEST_DIR/program2.eclair@12:8-12:9
     │
  11 │ ╭┤ reachable(a, b) :-
  12 │ ├┤   edge(x, y).
     • │         ┬
     • │         ╰╸ The variable 'x' only occurs once.
     • │
     • ╰╸ This rule contains no other references to 'x'.
     •
     │ Hint: Replace the variable with a wildcard ('_').
     │ Hint: Use the variable in another rule clause.
─────╯

[error]: Found unconstrained variable
     ╭──▶ TEST_DIR/program2.eclair@12:11-12:12
     │
  11 │ ╭┤ reachable(a, b) :-
  12 │ ├┤   edge(x, y).
     • │            ┬
     • │            ╰╸ The variable 'y' only occurs once.
     • │
     • ╰╸ This rule contains no other references to 'y'.
     •
     │ Hint: Replace the variable with a wildcard ('_').
     │ Hint: Use the variable in another rule clause.
─────╯
//--- program3.eclair

// RUN: %eclair compile %t/program3.eclair 2> %t/ungrounded_var_check_in_rule_body_actual.out
// RUN: diff -w %t/ungrounded_var_check_in_rule_body_expected.out %t/ungrounded_var_check_in_rule_body_actual.out

@def edge(u32, u32) input.
@def reachable(u32, u32) output.

reachable(x, z) :-
  edge(x, y),
  reachable(y, z),
  edge(a, b).

//--- ungrounded_var_check_in_rule_body_expected.out
[error]: Found unconstrained variable
     ╭──▶ TEST_DIR/program3.eclair@11:8-11:9
     │
   8 │ ╭┤ reachable(x, z) :-
   9 │ │    edge(x, y),
  10 │ │    reachable(y, z),
  11 │ ├┤   edge(a, b).
     • │         ┬
     • │         ╰╸ The variable 'a' only occurs once.
     • │
     • ╰╸ This rule contains no other references to 'a'.
     •
     │ Hint: Replace the variable with a wildcard ('_').
     │ Hint: Use the variable in another rule clause.
─────╯

[error]: Found unconstrained variable
     ╭──▶ TEST_DIR/program3.eclair@11:11-11:12
     │
   8 │ ╭┤ reachable(x, z) :-
   9 │ │    edge(x, y),
  10 │ │    reachable(y, z),
  11 │ ├┤   edge(a, b).
     • │            ┬
     • │            ╰╸ The variable 'b' only occurs once.
     • │
     • ╰╸ This rule contains no other references to 'b'.
     •
     │ Hint: Replace the variable with a wildcard ('_').
     │ Hint: Use the variable in another rule clause.
─────╯
//--- program4.eclair

// RUN: %eclair compile %t/program4.eclair 2> %t/ungrounded_var_check_for_edge_cases.out
// RUN: diff -w %t/ungrounded_var_check_for_edge_cases.out %t/ungrounded_var_check_for_edge_cases_actual.out

@def bar(u32) input.
@def foo(u32) output.

foo(x) :-
  bar(x),
  y = y.

foo(x) :-
  bar(x),
  a = b,
  b = a.

foo(x) :-
  bar(x),
  a = b,
  b = c,
  c = a.

//--- ungrounded_var_check_for_edge_cases_actual.out
[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@10:3-10:4
     │
   8 │ ╭┤ foo(x) :-
   9 │ │    bar(x),
  10 │ ├┤   y = y.
     • │    ┬
     • │    ╰╸ The variable 'y' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • │
     • ╰╸ This contains no clauses that refer to 'y'.
     •
     │ Hint: Use the variable 'y' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@10:7-10:8
     │
   8 │ ╭┤ foo(x) :-
   9 │ │    bar(x),
  10 │ ├┤   y = y.
     • │        ┬
     • │        ╰╸ The variable 'y' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • │
     • ╰╸ This contains no clauses that refer to 'y'.
     •
     │ Hint: Use the variable 'y' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@14:3-14:4
     │
  12 │ ╭┤ foo(x) :-
  13 │ │    bar(x),
  14 │ │    a = b,
     • │    ┬
     • │    ╰╸ The variable 'a' is ungrounded, meaning it is not directly bound as an argument to a relation.
  15 │ ├┤   b = a.
     • │
     • ╰╸ This contains no clauses that refer to 'a'.
     •
     │ Hint: Use the variable 'a' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@14:7-14:8
     │
  12 │ ╭┤ foo(x) :-
  13 │ │    bar(x),
  14 │ │    a = b,
     • │        ┬
     • │        ╰╸ The variable 'b' is ungrounded, meaning it is not directly bound as an argument to a relation.
  15 │ ├┤   b = a.
     • │
     • ╰╸ This contains no clauses that refer to 'b'.
     •
     │ Hint: Use the variable 'b' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@15:3-15:4
     │
  12 │ ╭┤ foo(x) :-
  13 │ │    bar(x),
  14 │ │    a = b,
  15 │ ├┤   b = a.
     • │    ┬
     • │    ╰╸ The variable 'b' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • │
     • ╰╸ This contains no clauses that refer to 'b'.
     •
     │ Hint: Use the variable 'b' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@15:7-15:8
     │
  12 │ ╭┤ foo(x) :-
  13 │ │    bar(x),
  14 │ │    a = b,
  15 │ ├┤   b = a.
     • │        ┬
     • │        ╰╸ The variable 'a' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • │
     • ╰╸ This contains no clauses that refer to 'a'.
     •
     │ Hint: Use the variable 'a' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@19:3-19:4
     │
  17 │ ╭┤ foo(x) :-
  18 │ │    bar(x),
  19 │ │    a = b,
     • │    ┬
     • │    ╰╸ The variable 'a' is ungrounded, meaning it is not directly bound as an argument to a relation.
  20 │ │    b = c,
  21 │ ├┤   c = a.
     • │
     • ╰╸ This contains no clauses that refer to 'a'.
     •
     │ Hint: Use the variable 'a' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@19:7-19:8
     │
  17 │ ╭┤ foo(x) :-
  18 │ │    bar(x),
  19 │ │    a = b,
     • │        ┬
     • │        ╰╸ The variable 'b' is ungrounded, meaning it is not directly bound as an argument to a relation.
  20 │ │    b = c,
  21 │ ├┤   c = a.
     • │
     • ╰╸ This contains no clauses that refer to 'b'.
     •
     │ Hint: Use the variable 'b' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@20:3-20:4
     │
  17 │ ╭┤ foo(x) :-
  18 │ │    bar(x),
  19 │ │    a = b,
  20 │ │    b = c,
     • │    ┬
     • │    ╰╸ The variable 'b' is ungrounded, meaning it is not directly bound as an argument to a relation.
  21 │ ├┤   c = a.
     • │
     • ╰╸ This contains no clauses that refer to 'b'.
     •
     │ Hint: Use the variable 'b' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@20:7-20:8
     │
  17 │ ╭┤ foo(x) :-
  18 │ │    bar(x),
  19 │ │    a = b,
  20 │ │    b = c,
     • │        ┬
     • │        ╰╸ The variable 'c' is ungrounded, meaning it is not directly bound as an argument to a relation.
  21 │ ├┤   c = a.
     • │
     • ╰╸ This contains no clauses that refer to 'c'.
     •
     │ Hint: Use the variable 'c' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@21:3-21:4
     │
  17 │ ╭┤ foo(x) :-
  18 │ │    bar(x),
  19 │ │    a = b,
  20 │ │    b = c,
  21 │ ├┤   c = a.
     • │    ┬
     • │    ╰╸ The variable 'c' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • │
     • ╰╸ This contains no clauses that refer to 'c'.
     •
     │ Hint: Use the variable 'c' as an argument in a relation.
─────╯

[error]: Ungrounded variable
     ╭──▶ TEST_DIR/program4.eclair@21:7-21:8
     │
  17 │ ╭┤ foo(x) :-
  18 │ │    bar(x),
  19 │ │    a = b,
  20 │ │    b = c,
  21 │ ├┤   c = a.
     • │        ┬
     • │        ╰╸ The variable 'a' is ungrounded, meaning it is not directly bound as an argument to a relation.
     • │
     • ╰╸ This contains no clauses that refer to 'a'.
     •
     │ Hint: Use the variable 'a' as an argument in a relation.
─────╯
