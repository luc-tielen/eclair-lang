// This checks if eclair can be correctly compiled to WASM and used from JS.

// RUN: mkdir -p %t && sed s@TEST_DIR@%t@g %s > %t/input.test
// RUN: split-file %t/input.test %t

// TODO: we really need to have our own WASM allocator..
// RUN: test -e %t/walloc.c || wget https://raw.githubusercontent.com/wingo/walloc/master/walloc.c -O %t/walloc.c
// RUN: clang -O0 --target=wasm32 -mbulk-memory -nostdlib -c -o %t/walloc.o %t/walloc.c

// RUN: %eclair compile --target wasm32 %t/program.eclair > %t/program.ll
// RUN: clang -O0 --target=wasm32 -mbulk-memory -nostdlib -c -o %t/program.o %t/program.ll
// RUN: %wasm-ld --no-entry --import-memory -o %t/program.wasm %t/program.o %t/walloc.o

// RUN: node %t/program.js | FileCheck %s

// CHECK: [ 1, 2 ]
// CHECK-NEXT: [ 1, 3 ]
// CHECK-NEXT: [ 1, 4 ]
// CHECK-NEXT: [ 2, 3 ]
// CHECK-NEXT: [ 2, 4 ]
// CHECK-NEXT: [ 3, 4 ]

//--- program.eclair

@def edge(u32, u32).
@def reachable(u32, u32).

reachable(x, y) :-
  edge(x, y).

reachable(x, y) :-
  edge(x, z),
  reachable(z, y).

//--- program.js

const fs = require("fs");

const addFact = (
  instance,
  memory,
  program,
  factType,
  factArray,
  columnCount
) => {
  const byteCount = columnCount * Uint32Array.BYTES_PER_ELEMENT;
  const address = instance.exports.eclair_malloc(byteCount);
  const array = new Uint32Array(memory.buffer, address, byteCount);
  array.set(factArray);
  instance.exports.eclair_add_fact(program, factType, address);
  instance.exports.eclair_free(address);
};

const addFacts = (
  instance,
  memory,
  program,
  factType,
  factsArray,
  columnCount
) => {
  const byteCount =
    factsArray.length * columnCount * Uint32Array.BYTES_PER_ELEMENT;
  const address = instance.exports.eclair_malloc(byteCount);
  const array = new Uint32Array(memory.buffer, address, byteCount);
  array.set(factsArray.flat());
  instance.exports.eclair_add_facts(
    program,
    factType,
    address,
    factsArray.length
  );
  instance.exports.eclair_free(address);
};

const EDGE = 0;
const REACHABLE = 1;
const NUM_COLUMNS = 2;

const main = () => {
  const bytes = fs.readFileSync("TEST_DIR/program.wasm");

  const mod = new WebAssembly.Module(bytes);
  const memory = new WebAssembly.Memory({ initial: 3, maximum: 3 });
  const imports = { env: { memory } };
  const instance = new WebAssembly.Instance(mod, imports);

  const program = instance.exports.eclair_program_init();

  addFact(instance, memory, program, EDGE, [1, 2], NUM_COLUMNS);
  addFacts(instance, memory, program, EDGE, [[2, 3], [3, 4]], NUM_COLUMNS);

  instance.exports.eclair_program_run(program);

  const resultAddress = instance.exports.eclair_get_facts(program, REACHABLE);
  const factCount = instance.exports.eclair_fact_count(program, REACHABLE);
  const resultArray = new Uint32Array(
    memory.buffer,
    resultAddress,
    factCount * NUM_COLUMNS
  );
  const results = Array.from(resultArray);
  for (let i = 0; i < results.length; i += NUM_COLUMNS) {
    const fact = results.slice(i, i + NUM_COLUMNS);
    console.log(fact);
  }
  instance.exports.eclair_free_buffer(resultAddress);

  instance.exports.eclair_program_destroy(program);
};

main();
