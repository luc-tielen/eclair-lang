// RUN: %eclair compile --emit ra-transformed %s | FileCheck %s
// CHECK: project

// u32
@def fact1(u32) output.
@def fact2(u32, u32, u32) output.
  @def  fact3  (  u32  ,  u32  ) output.

fact3(0, 1).
fact3(2, 3).

fact2(1,2,3).

// strings
@def fact4(string) output.
@def fact5(u32, string) output.
@def fact6(string  ,  string,string  )     output  .

fact4("").
fact4("a").
fact4(  "b"   ).
fact6(  "c"   , "d","e"   ).
fact4("\"\n\r\t\b\f\v\0").

// NOTE: rules and assignments are tested implicitly in other tests

// mix of everything
@def edge(field1: u32, field2: u32) input.
@def path(u32, only_one_named_field: u32) output.
@def literals_in_rule(u32) output.

edge(1, 2).
edge(2, 3).

path(x, y) :-
  edge(x, y).

path(x, y) :-
  edge(x, z),
  path(z, y).

// This also checks for potential naming collisions
@def u32(u32) input.
@def string(string) input.
@def mix(u32, string) input.
literals_in_rule(789) :-
  u32(  123 ),
  string( "abc"),
  mix(456, "def").

@def constraints(u32).
constraints(x) :-
  u32(x),
  x < 100,
  x <= 100,
  100 > x,
  100 >= x,
  100 != x.

@def arithmetic(u32).
arithmetic(x) :-
  u32(x),
  x = 1 + 2 * (7 / 4),
  1 + 2 - 0 < x.
arithmetic(123 + 456 * 789).

@extern constraint(string).
@extern func(u32) u32.
@extern func2(u32, u32) string.
@def test_externs(u32).

test_externs(func(123)).
test_externs(x) :-
  edge(x, y),
  func(y) + 1 = x,
  x = func(y) + y,
  func(x) = func(y).

@extern func_with_named_fields(field1: u32, field2: u32) string.
@extern constraint_with_named_field(u32, another_field: u32).

@def test_negation(u32).

test_negation(x) :-
  edge(x, x),
  !edge(1, 2),
  edge(123, x).

// TODO: failure cases, more thorough testing in general
