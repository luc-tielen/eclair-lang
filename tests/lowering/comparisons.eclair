// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_llvm_snippet.out
// RUN: diff %t/expected_llvm.out %t/actual_llvm_snippet.out

//--- program.eclair
@def fact1(u32, u32) input.
@def fact2(u32, u32) output.

fact2(x, 1) :-
  z = x,
  fact1(x, z),
  y = 123,
  fact1(y, x).

fact2(x, y) :-
  123 = x,
  fact1(y, x).

fact2(x, y) :-
  123 < x,
  123 <= x,
  123 > x,
  123 >= x,
  123 != x,
  fact1(y, x).

//--- expected_ra.out
search fact1 as fact10 do
  if 123 < fact10[1] do
    if 123 <= fact10[1] do
      if 123 > fact10[1] do
        if 123 >= fact10[1] do
          if 123 != fact10[1] do
            project (fact10[1], fact10[0]) into fact2
search fact1 as fact10 where (123 = fact10[1]) do
  project (fact10[1], fact10[0]) into fact2
search fact1 as fact10 do
  if fact10[1] = fact10[0] do
    search fact1 as fact11 where (fact11[0] = 123 and fact10[0] = fact11[1]) do
      project (fact10[0], 1) into fact2
//--- expected_eir.out
declare_type Program
{
  symbol_table
  fact1 btree(num_columns=2, index=[1,0], block_size=256, search_type=linear)
  fact2 btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  fact1.init_empty(program.1)
  fact2.init_empty(program.2)
  symbol_table.insert(program.0, "fact1")
  symbol_table.insert(program.0, "fact2")
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  fact1.destroy(FN_ARG[0].1)
  fact2.destroy(FN_ARG[0].2)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  lower_bound_value = fact1.stack_allocate Value
  upper_bound_value = fact1.stack_allocate Value
  lower_bound_value.0 = 0
  lower_bound_value.1 = 0
  upper_bound_value.0 = 4294967295
  upper_bound_value.1 = 4294967295
  begin_iter = fact1.stack_allocate Iter
  end_iter = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value, begin_iter)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value, end_iter)
  loop
  {
    condition = fact1.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = fact1.iter_current(begin_iter)
    condition_1 = (123 < current.1)
    if (condition_1)
    {
      condition_2 = (123 <= current.1)
      if (condition_2)
      {
        condition_3 = (123 > current.1)
        if (condition_3)
        {
          condition_4 = (123 >= current.1)
          if (condition_4)
          {
            condition_5 = (123 != current.1)
            if (condition_5)
            {
              value = fact2.stack_allocate Value
              value.0 = current.1
              value.1 = current.0
              fact2.insert(FN_ARG[0].2, value)
            }
          }
        }
      }
    }
    fact1.iter_next(begin_iter)
  }
  range_query.end:
  lower_bound_value_1 = fact1.stack_allocate Value
  upper_bound_value_1 = fact1.stack_allocate Value
  lower_bound_value_1.0 = 0
  lower_bound_value_1.1 = 123
  upper_bound_value_1.0 = 4294967295
  upper_bound_value_1.1 = 123
  begin_iter_1 = fact1.stack_allocate Iter
  end_iter_1 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_1, begin_iter_1)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_1, end_iter_1)
  loop
  {
    condition_6 = fact1.iter_is_equal(begin_iter_1, end_iter_1)
    if (condition_6)
    {
      goto range_query.end_1
    }
    current_1 = fact1.iter_current(begin_iter_1)
    value_1 = fact2.stack_allocate Value
    value_1.0 = current_1.1
    value_1.1 = current_1.0
    fact2.insert(FN_ARG[0].2, value_1)
    fact1.iter_next(begin_iter_1)
  }
  range_query.end_1:
  lower_bound_value_2 = fact1.stack_allocate Value
  upper_bound_value_2 = fact1.stack_allocate Value
  lower_bound_value_2.0 = 0
  lower_bound_value_2.1 = 0
  upper_bound_value_2.0 = 4294967295
  upper_bound_value_2.1 = 4294967295
  begin_iter_2 = fact1.stack_allocate Iter
  end_iter_2 = fact1.stack_allocate Iter
  fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_2, begin_iter_2)
  fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_2, end_iter_2)
  loop
  {
    condition_7 = fact1.iter_is_equal(begin_iter_2, end_iter_2)
    if (condition_7)
    {
      goto range_query.end_2
    }
    current_2 = fact1.iter_current(begin_iter_2)
    condition_8 = (current_2.1 == current_2.0)
    if (condition_8)
    {
      lower_bound_value_3 = fact1.stack_allocate Value
      upper_bound_value_3 = fact1.stack_allocate Value
      lower_bound_value_3.0 = 123
      lower_bound_value_3.1 = current_2.0
      upper_bound_value_3.0 = 123
      upper_bound_value_3.1 = current_2.0
      begin_iter_3 = fact1.stack_allocate Iter
      end_iter_3 = fact1.stack_allocate Iter
      fact1.iter_lower_bound(FN_ARG[0].1, lower_bound_value_3, begin_iter_3)
      fact1.iter_upper_bound(FN_ARG[0].1, upper_bound_value_3, end_iter_3)
      loop
      {
        condition_9 = fact1.iter_is_equal(begin_iter_3, end_iter_3)
        if (condition_9)
        {
          goto range_query.end_3
        }
        current_3 = fact1.iter_current(begin_iter_3)
        value_2 = fact2.stack_allocate Value
        value_2.0 = current_2.0
        value_2.1 = 1
        fact2.insert(FN_ARG[0].2, value_2)
        fact1.iter_next(begin_iter_3)
      }
      range_query.end_3:
    }
    fact1.iter_next(begin_iter_2)
  }
  range_query.end_2:
}
//--- expected_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %stack.ptr_0 = alloca [2 x i32], i32 1
  %stack.ptr_1 = alloca [2 x i32], i32 1
  %stack.ptr_2 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_3 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_4 = alloca [2 x i32], i32 1
  %stack.ptr_5 = alloca [2 x i32], i32 1
  %stack.ptr_6 = alloca [2 x i32], i32 1
  %stack.ptr_7 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_8 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_9 = alloca [2 x i32], i32 1
  %stack.ptr_10 = alloca [2 x i32], i32 1
  %stack.ptr_11 = alloca [2 x i32], i32 1
  %stack.ptr_12 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_13 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_14 = alloca [2 x i32], i32 1
  %stack.ptr_15 = alloca [2 x i32], i32 1
  %stack.ptr_16 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_17 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_18 = alloca [2 x i32], i32 1
  %0 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_0, i32 0, i32 0
  store i32 0, i32* %0
  %1 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_0, i32 0, i32 1
  store i32 0, i32* %1
  %2 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_1, i32 0, i32 0
  store i32 4294967295, i32* %2
  %3 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_1, i32 0, i32 1
  store i32 4294967295, i32* %3
  %4 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %4, [2 x i32]* %stack.ptr_0, %btree_iterator_t_0* %stack.ptr_2)
  %5 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %5, [2 x i32]* %stack.ptr_1, %btree_iterator_t_0* %stack.ptr_3)
  br label %loop_0
loop_0:
  %6 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_2, %btree_iterator_t_0* %stack.ptr_3)
  br i1 %6, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %7 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_2)
  %8 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  %9 = load i32, i32* %8
  %10 = icmp ult i32 123, %9
  br i1 %10, label %if_1, label %end_if_5
if_1:
  %11 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  %12 = load i32, i32* %11
  %13 = icmp ule i32 123, %12
  br i1 %13, label %if_2, label %end_if_4
if_2:
  %14 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  %15 = load i32, i32* %14
  %16 = icmp ugt i32 123, %15
  br i1 %16, label %if_3, label %end_if_3
if_3:
  %17 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  %18 = load i32, i32* %17
  %19 = icmp uge i32 123, %18
  br i1 %19, label %if_4, label %end_if_2
if_4:
  %20 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  %21 = load i32, i32* %20
  %22 = icmp ne i32 123, %21
  br i1 %22, label %if_5, label %end_if_1
if_5:
  %23 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_4, i32 0, i32 0
  %24 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  %25 = load i32, i32* %24
  store i32 %25, i32* %23
  %26 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_4, i32 0, i32 1
  %27 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 0
  %28 = load i32, i32* %27
  store i32 %28, i32* %26
  %29 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %30 = call ccc i1 @eclair_btree_insert_value_1(%btree_t_1* %29, [2 x i32]* %stack.ptr_4)
  br label %end_if_1
end_if_1:
  br label %end_if_2
end_if_2:
  br label %end_if_3
end_if_3:
  br label %end_if_4
end_if_4:
  br label %end_if_5
end_if_5:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_2)
  br label %loop_0
range_query.end:
  %31 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_5, i32 0, i32 0
  store i32 0, i32* %31
  %32 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_5, i32 0, i32 1
  store i32 123, i32* %32
  %33 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_6, i32 0, i32 0
  store i32 4294967295, i32* %33
  %34 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_6, i32 0, i32 1
  store i32 123, i32* %34
  %35 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %35, [2 x i32]* %stack.ptr_5, %btree_iterator_t_0* %stack.ptr_7)
  %36 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %36, [2 x i32]* %stack.ptr_6, %btree_iterator_t_0* %stack.ptr_8)
  br label %loop_1
loop_1:
  %37 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_7, %btree_iterator_t_0* %stack.ptr_8)
  br i1 %37, label %if_6, label %end_if_6
if_6:
  br label %range_query.end_1
end_if_6:
  %38 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_7)
  %39 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_9, i32 0, i32 0
  %40 = getelementptr [2 x i32], [2 x i32]* %38, i32 0, i32 1
  %41 = load i32, i32* %40
  store i32 %41, i32* %39
  %42 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_9, i32 0, i32 1
  %43 = getelementptr [2 x i32], [2 x i32]* %38, i32 0, i32 0
  %44 = load i32, i32* %43
  store i32 %44, i32* %42
  %45 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %46 = call ccc i1 @eclair_btree_insert_value_1(%btree_t_1* %45, [2 x i32]* %stack.ptr_9)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_7)
  br label %loop_1
range_query.end_1:
  %47 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_10, i32 0, i32 0
  store i32 0, i32* %47
  %48 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_10, i32 0, i32 1
  store i32 0, i32* %48
  %49 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_11, i32 0, i32 0
  store i32 4294967295, i32* %49
  %50 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_11, i32 0, i32 1
  store i32 4294967295, i32* %50
  %51 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %51, [2 x i32]* %stack.ptr_10, %btree_iterator_t_0* %stack.ptr_12)
  %52 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %52, [2 x i32]* %stack.ptr_11, %btree_iterator_t_0* %stack.ptr_13)
  br label %loop_2
loop_2:
  %53 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_12, %btree_iterator_t_0* %stack.ptr_13)
  br i1 %53, label %if_7, label %end_if_7
if_7:
  br label %range_query.end_2
end_if_7:
  %54 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_12)
  %55 = getelementptr [2 x i32], [2 x i32]* %54, i32 0, i32 1
  %56 = load i32, i32* %55
  %57 = getelementptr [2 x i32], [2 x i32]* %54, i32 0, i32 0
  %58 = load i32, i32* %57
  %59 = icmp eq i32 %56, %58
  br i1 %59, label %if_8, label %end_if_9
if_8:
  %60 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_14, i32 0, i32 0
  store i32 123, i32* %60
  %61 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_14, i32 0, i32 1
  %62 = getelementptr [2 x i32], [2 x i32]* %54, i32 0, i32 0
  %63 = load i32, i32* %62
  store i32 %63, i32* %61
  %64 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_15, i32 0, i32 0
  store i32 123, i32* %64
  %65 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_15, i32 0, i32 1
  %66 = getelementptr [2 x i32], [2 x i32]* %54, i32 0, i32 0
  %67 = load i32, i32* %66
  store i32 %67, i32* %65
  %68 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %68, [2 x i32]* %stack.ptr_14, %btree_iterator_t_0* %stack.ptr_16)
  %69 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %69, [2 x i32]* %stack.ptr_15, %btree_iterator_t_0* %stack.ptr_17)
  br label %loop_3
loop_3:
  %70 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_16, %btree_iterator_t_0* %stack.ptr_17)
  br i1 %70, label %if_9, label %end_if_8
if_9:
  br label %range_query.end_3
end_if_8:
  %71 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_16)
  %72 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_18, i32 0, i32 0
  %73 = getelementptr [2 x i32], [2 x i32]* %54, i32 0, i32 0
  %74 = load i32, i32* %73
  store i32 %74, i32* %72
  %75 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_18, i32 0, i32 1
  store i32 1, i32* %75
  %76 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %77 = call ccc i1 @eclair_btree_insert_value_1(%btree_t_1* %76, [2 x i32]* %stack.ptr_18)
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_16)
  br label %loop_3
range_query.end_3:
  br label %end_if_9
end_if_9:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_12)
  br label %loop_2
range_query.end_2:
  ret void
}
