// TODO variant where one is recursive
// TODO tests for rules with >2 clauses, ...

// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "program = " > %t/actual_eclair_program_type.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_init" > %t/actual_eclair_program_init_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_destroy" > %t/actual_eclair_program_destroy_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_type.out %t/actual_eclair_program_type.out
// RUN: diff %t/expected_eclair_program_init_llvm.out %t/actual_eclair_program_init_llvm.out
// RUN: diff %t/expected_eclair_program_destroy_llvm.out %t/actual_eclair_program_destroy_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

//--- program.eclair
@def a(u32) output.
@def b(u32) output.
@def c(u32) output.
@def d(u32) output.

a(x) :- b(x), c(x).
b(1).
b(x) :- c(x), d(x).
c(2).
c(x) :- b(x), d(x).
d(3).

//--- expected_ra.out
project (3) into d
project (2) into c
project (1) into b
merge c delta_c
merge b delta_b
loop do
  purge new_c
  purge new_b
  parallel do
    search delta_b as delta_b0 do
      if (delta_b0[0]) ∉ c do
        search d as d1 where (delta_b0[0] = d1[0]) do
          project (delta_b0[0]) into new_c
    search delta_c as delta_c0 do
      if (delta_c0[0]) ∉ b do
        search d as d1 where (delta_c0[0] = d1[0]) do
          project (delta_c0[0]) into new_b
  exit if counttuples(new_c) = 0 and counttuples(new_b) = 0
  merge new_c c
  swap new_c delta_c
  merge new_b b
  swap new_b delta_b
search b as b0 do
  search c as c1 where (b0[0] = c1[0]) do
    project (b0[0]) into a
//--- expected_eir.out
declare_type Program
{
  symbol_table
  a btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  b btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  c btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  d btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  delta_b btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  delta_c btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  new_b btree(num_columns=1, index=[0], block_size=256, search_type=linear)
  new_c btree(num_columns=1, index=[0], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  a.init_empty(program.1)
  b.init_empty(program.2)
  c.init_empty(program.3)
  d.init_empty(program.4)
  delta_b.init_empty(program.5)
  delta_c.init_empty(program.6)
  new_b.init_empty(program.7)
  new_c.init_empty(program.8)
  symbol_table.insert(program.0, "a")
  symbol_table.insert(program.0, "b")
  symbol_table.insert(program.0, "c")
  symbol_table.insert(program.0, "d")
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  a.destroy(FN_ARG[0].1)
  b.destroy(FN_ARG[0].2)
  c.destroy(FN_ARG[0].3)
  d.destroy(FN_ARG[0].4)
  delta_b.destroy(FN_ARG[0].5)
  delta_c.destroy(FN_ARG[0].6)
  new_b.destroy(FN_ARG[0].7)
  new_c.destroy(FN_ARG[0].8)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  value = d.stack_allocate Value
  value.0 = 3
  d.insert(FN_ARG[0].4, value)
  value_1 = c.stack_allocate Value
  value_1.0 = 2
  c.insert(FN_ARG[0].3, value_1)
  value_2 = b.stack_allocate Value
  value_2.0 = 1
  b.insert(FN_ARG[0].2, value_2)
  begin_iter = c.stack_allocate Iter
  end_iter = c.stack_allocate Iter
  c.iter_begin(FN_ARG[0].3, begin_iter)
  c.iter_end(FN_ARG[0].3, end_iter)
  delta_c.insert_range<c[0]>(FN_ARG[0].6, begin_iter, end_iter)
  begin_iter_1 = b.stack_allocate Iter
  end_iter_1 = b.stack_allocate Iter
  b.iter_begin(FN_ARG[0].2, begin_iter_1)
  b.iter_end(FN_ARG[0].2, end_iter_1)
  delta_b.insert_range<b[0]>(FN_ARG[0].5, begin_iter_1, end_iter_1)
  loop
  {
    new_c.purge(FN_ARG[0].8)
    new_b.purge(FN_ARG[0].7)
    parallel
    {
      lower_bound_value = b.stack_allocate Value
      upper_bound_value = b.stack_allocate Value
      lower_bound_value.0 = 0
      upper_bound_value.0 = 4294967295
      begin_iter_2 = b.stack_allocate Iter
      end_iter_2 = b.stack_allocate Iter
      delta_b.iter_lower_bound(FN_ARG[0].5, lower_bound_value, begin_iter_2)
      delta_b.iter_upper_bound(FN_ARG[0].5, upper_bound_value, end_iter_2)
      loop
      {
        condition = delta_b.iter_is_equal(begin_iter_2, end_iter_2)
        if (condition)
        {
          goto range_query.end
        }
        current = delta_b.iter_current(begin_iter_2)
        value_3 = c.stack_allocate Value
        value_3.0 = current.0
        contains_result = c.contains(FN_ARG[0].3, value_3)
        condition_1 = not contains_result
        if (condition_1)
        {
          lower_bound_value_1 = d.stack_allocate Value
          upper_bound_value_1 = d.stack_allocate Value
          lower_bound_value_1.0 = current.0
          upper_bound_value_1.0 = current.0
          begin_iter_3 = d.stack_allocate Iter
          end_iter_3 = d.stack_allocate Iter
          d.iter_lower_bound(FN_ARG[0].4, lower_bound_value_1, begin_iter_3)
          d.iter_upper_bound(FN_ARG[0].4, upper_bound_value_1, end_iter_3)
          loop
          {
            condition_2 = d.iter_is_equal(begin_iter_3, end_iter_3)
            if (condition_2)
            {
              goto range_query.end_1
            }
            current_1 = d.iter_current(begin_iter_3)
            value_4 = c.stack_allocate Value
            value_4.0 = current.0
            new_c.insert(FN_ARG[0].8, value_4)
            d.iter_next(begin_iter_3)
          }
          range_query.end_1:
        }
        delta_b.iter_next(begin_iter_2)
      }
      range_query.end:
      lower_bound_value_2 = c.stack_allocate Value
      upper_bound_value_2 = c.stack_allocate Value
      lower_bound_value_2.0 = 0
      upper_bound_value_2.0 = 4294967295
      begin_iter_4 = c.stack_allocate Iter
      end_iter_4 = c.stack_allocate Iter
      delta_c.iter_lower_bound(FN_ARG[0].6, lower_bound_value_2, begin_iter_4)
      delta_c.iter_upper_bound(FN_ARG[0].6, upper_bound_value_2, end_iter_4)
      loop
      {
        condition_3 = delta_c.iter_is_equal(begin_iter_4, end_iter_4)
        if (condition_3)
        {
          goto range_query.end_2
        }
        current_2 = delta_c.iter_current(begin_iter_4)
        value_5 = b.stack_allocate Value
        value_5.0 = current_2.0
        contains_result_1 = b.contains(FN_ARG[0].2, value_5)
        condition_4 = not contains_result_1
        if (condition_4)
        {
          lower_bound_value_3 = d.stack_allocate Value
          upper_bound_value_3 = d.stack_allocate Value
          lower_bound_value_3.0 = current_2.0
          upper_bound_value_3.0 = current_2.0
          begin_iter_5 = d.stack_allocate Iter
          end_iter_5 = d.stack_allocate Iter
          d.iter_lower_bound(FN_ARG[0].4, lower_bound_value_3, begin_iter_5)
          d.iter_upper_bound(FN_ARG[0].4, upper_bound_value_3, end_iter_5)
          loop
          {
            condition_5 = d.iter_is_equal(begin_iter_5, end_iter_5)
            if (condition_5)
            {
              goto range_query.end_3
            }
            current_3 = d.iter_current(begin_iter_5)
            value_6 = b.stack_allocate Value
            value_6.0 = current_2.0
            new_b.insert(FN_ARG[0].7, value_6)
            d.iter_next(begin_iter_5)
          }
          range_query.end_3:
        }
        delta_c.iter_next(begin_iter_4)
      }
      range_query.end_2:
    }
    condition_6 = new_b.is_empty(FN_ARG[0].7)
    if (condition_6)
    {
      condition_7 = new_c.is_empty(FN_ARG[0].8)
      if (condition_7)
      {
        goto loop.end
      }
    }
    begin_iter_6 = c.stack_allocate Iter
    end_iter_6 = c.stack_allocate Iter
    new_c.iter_begin(FN_ARG[0].8, begin_iter_6)
    new_c.iter_end(FN_ARG[0].8, end_iter_6)
    c.insert_range<new_c[0]>(FN_ARG[0].3, begin_iter_6, end_iter_6)
    new_c.swap(FN_ARG[0].8, FN_ARG[0].6)
    begin_iter_7 = b.stack_allocate Iter
    end_iter_7 = b.stack_allocate Iter
    new_b.iter_begin(FN_ARG[0].7, begin_iter_7)
    new_b.iter_end(FN_ARG[0].7, end_iter_7)
    b.insert_range<new_b[0]>(FN_ARG[0].2, begin_iter_7, end_iter_7)
    new_b.swap(FN_ARG[0].7, FN_ARG[0].5)
  }
  loop.end:
  lower_bound_value_4 = b.stack_allocate Value
  upper_bound_value_4 = b.stack_allocate Value
  lower_bound_value_4.0 = 0
  upper_bound_value_4.0 = 4294967295
  begin_iter_8 = b.stack_allocate Iter
  end_iter_8 = b.stack_allocate Iter
  b.iter_lower_bound(FN_ARG[0].2, lower_bound_value_4, begin_iter_8)
  b.iter_upper_bound(FN_ARG[0].2, upper_bound_value_4, end_iter_8)
  loop
  {
    condition_8 = b.iter_is_equal(begin_iter_8, end_iter_8)
    if (condition_8)
    {
      goto range_query.end_4
    }
    current_4 = b.iter_current(begin_iter_8)
    lower_bound_value_5 = c.stack_allocate Value
    upper_bound_value_5 = c.stack_allocate Value
    lower_bound_value_5.0 = current_4.0
    upper_bound_value_5.0 = current_4.0
    begin_iter_9 = c.stack_allocate Iter
    end_iter_9 = c.stack_allocate Iter
    c.iter_lower_bound(FN_ARG[0].3, lower_bound_value_5, begin_iter_9)
    c.iter_upper_bound(FN_ARG[0].3, upper_bound_value_5, end_iter_9)
    loop
    {
      condition_9 = c.iter_is_equal(begin_iter_9, end_iter_9)
      if (condition_9)
      {
        goto range_query.end_5
      }
      current_5 = c.iter_current(begin_iter_9)
      value_7 = a.stack_allocate Value
      value_7.0 = current_4.0
      a.insert(FN_ARG[0].1, value_7)
      c.iter_next(begin_iter_9)
    }
    range_query.end_5:
    b.iter_next(begin_iter_8)
  }
  range_query.end_4:
}
//--- expected_eclair_program_type.out
%program = type {%symbol_table, %btree_t_0, %btree_t_0, %btree_t_0, %btree_t_0, %btree_t_0, %btree_t_0, %btree_t_0, %btree_t_0}
//--- expected_eclair_program_init_llvm.out
define external ccc ptr @eclair_program_init() "wasm-export-name"="eclair_program_init" {
start:
  %stack.ptr_0 = alloca %symbol_t, i32 1
  %stack.ptr_1 = alloca %symbol_t, i32 1
  %stack.ptr_2 = alloca %symbol_t, i32 1
  %stack.ptr_3 = alloca %symbol_t, i32 1
  %0 = call ccc ptr @malloc(i32 1688)
  %1 = getelementptr %program, ptr %0, i32 0, i32 0
  call ccc void @eclair_symbol_table_init(ptr %1)
  %2 = getelementptr %program, ptr %0, i32 0, i32 1
  call ccc void @eclair_btree_init_empty_0(ptr %2)
  %3 = getelementptr %program, ptr %0, i32 0, i32 2
  call ccc void @eclair_btree_init_empty_0(ptr %3)
  %4 = getelementptr %program, ptr %0, i32 0, i32 3
  call ccc void @eclair_btree_init_empty_0(ptr %4)
  %5 = getelementptr %program, ptr %0, i32 0, i32 4
  call ccc void @eclair_btree_init_empty_0(ptr %5)
  %6 = getelementptr %program, ptr %0, i32 0, i32 5
  call ccc void @eclair_btree_init_empty_0(ptr %6)
  %7 = getelementptr %program, ptr %0, i32 0, i32 6
  call ccc void @eclair_btree_init_empty_0(ptr %7)
  %8 = getelementptr %program, ptr %0, i32 0, i32 7
  call ccc void @eclair_btree_init_empty_0(ptr %8)
  %9 = getelementptr %program, ptr %0, i32 0, i32 8
  call ccc void @eclair_btree_init_empty_0(ptr %9)
  %10 = getelementptr %program, ptr %0, i32 0, i32 0
  %11 = getelementptr inbounds [2 x i8], ptr @string_literal_0, i32 0, i32 0
  %12 = zext i32 1 to i64
  %13 = call ccc ptr @malloc(i32 1)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(ptr %13, ptr %11, i64 %12, i1 0)
  call ccc void @eclair_symbol_init(ptr %stack.ptr_0, i32 1, ptr %13)
  %14 = call ccc i32 @eclair_symbol_table_find_or_insert(ptr %10, ptr %stack.ptr_0)
  %15 = getelementptr %program, ptr %0, i32 0, i32 0
  %16 = getelementptr inbounds [2 x i8], ptr @string_literal_1, i32 0, i32 0
  %17 = zext i32 1 to i64
  %18 = call ccc ptr @malloc(i32 1)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(ptr %18, ptr %16, i64 %17, i1 0)
  call ccc void @eclair_symbol_init(ptr %stack.ptr_1, i32 1, ptr %18)
  %19 = call ccc i32 @eclair_symbol_table_find_or_insert(ptr %15, ptr %stack.ptr_1)
  %20 = getelementptr %program, ptr %0, i32 0, i32 0
  %21 = getelementptr inbounds [2 x i8], ptr @string_literal_2, i32 0, i32 0
  %22 = zext i32 1 to i64
  %23 = call ccc ptr @malloc(i32 1)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(ptr %23, ptr %21, i64 %22, i1 0)
  call ccc void @eclair_symbol_init(ptr %stack.ptr_2, i32 1, ptr %23)
  %24 = call ccc i32 @eclair_symbol_table_find_or_insert(ptr %20, ptr %stack.ptr_2)
  %25 = getelementptr %program, ptr %0, i32 0, i32 0
  %26 = getelementptr inbounds [2 x i8], ptr @string_literal_3, i32 0, i32 0
  %27 = zext i32 1 to i64
  %28 = call ccc ptr @malloc(i32 1)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(ptr %28, ptr %26, i64 %27, i1 0)
  call ccc void @eclair_symbol_init(ptr %stack.ptr_3, i32 1, ptr %28)
  %29 = call ccc i32 @eclair_symbol_table_find_or_insert(ptr %25, ptr %stack.ptr_3)
  ret ptr %0
}
//--- expected_eclair_program_destroy_llvm.out
define external ccc void @eclair_program_destroy(ptr %arg_0) "wasm-export-name"="eclair_program_destroy" {
start:
  %0 = getelementptr %program, ptr %arg_0, i32 0, i32 0
  call ccc void @eclair_symbol_table_destroy(ptr %0)
  %1 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_destroy_0(ptr %1)
  %2 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_destroy_0(ptr %2)
  %3 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_destroy_0(ptr %3)
  %4 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_destroy_0(ptr %4)
  %5 = getelementptr %program, ptr %arg_0, i32 0, i32 5
  call ccc void @eclair_btree_destroy_0(ptr %5)
  %6 = getelementptr %program, ptr %arg_0, i32 0, i32 6
  call ccc void @eclair_btree_destroy_0(ptr %6)
  %7 = getelementptr %program, ptr %arg_0, i32 0, i32 7
  call ccc void @eclair_btree_destroy_0(ptr %7)
  %8 = getelementptr %program, ptr %arg_0, i32 0, i32 8
  call ccc void @eclair_btree_destroy_0(ptr %8)
  call ccc void @free(ptr %arg_0)
  ret void
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(ptr %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %stack.ptr_0 = alloca [1 x i32], i32 1
  %stack.ptr_1 = alloca [1 x i32], i32 1
  %stack.ptr_2 = alloca [1 x i32], i32 1
  %stack.ptr_3 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_4 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_5 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_6 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_7 = alloca [1 x i32], i32 1
  %stack.ptr_8 = alloca [1 x i32], i32 1
  %stack.ptr_9 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_10 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_11 = alloca [1 x i32], i32 1
  %stack.ptr_12 = alloca [1 x i32], i32 1
  %stack.ptr_13 = alloca [1 x i32], i32 1
  %stack.ptr_14 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_15 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_16 = alloca [1 x i32], i32 1
  %stack.ptr_17 = alloca [1 x i32], i32 1
  %stack.ptr_18 = alloca [1 x i32], i32 1
  %stack.ptr_19 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_20 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_21 = alloca [1 x i32], i32 1
  %stack.ptr_22 = alloca [1 x i32], i32 1
  %stack.ptr_23 = alloca [1 x i32], i32 1
  %stack.ptr_24 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_25 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_26 = alloca [1 x i32], i32 1
  %stack.ptr_27 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_28 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_29 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_30 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_31 = alloca [1 x i32], i32 1
  %stack.ptr_32 = alloca [1 x i32], i32 1
  %stack.ptr_33 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_34 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_35 = alloca [1 x i32], i32 1
  %stack.ptr_36 = alloca [1 x i32], i32 1
  %stack.ptr_37 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_38 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_39 = alloca [1 x i32], i32 1
  %0 = getelementptr [1 x i32], ptr %stack.ptr_0, i32 0, i32 0
  store i32 3, ptr %0
  %1 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  %2 = call ccc i1 @eclair_btree_insert_value_0(ptr %1, ptr %stack.ptr_0)
  %3 = getelementptr [1 x i32], ptr %stack.ptr_1, i32 0, i32 0
  store i32 2, ptr %3
  %4 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  %5 = call ccc i1 @eclair_btree_insert_value_0(ptr %4, ptr %stack.ptr_1)
  %6 = getelementptr [1 x i32], ptr %stack.ptr_2, i32 0, i32 0
  store i32 1, ptr %6
  %7 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  %8 = call ccc i1 @eclair_btree_insert_value_0(ptr %7, ptr %stack.ptr_2)
  %9 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_begin_0(ptr %9, ptr %stack.ptr_3)
  %10 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_end_0(ptr %10, ptr %stack.ptr_4)
  %11 = getelementptr %program, ptr %arg_0, i32 0, i32 6
  call ccc void @eclair_btree_insert_range_delta_c_c(ptr %11, ptr %stack.ptr_3, ptr %stack.ptr_4)
  %12 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_begin_0(ptr %12, ptr %stack.ptr_5)
  %13 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_end_0(ptr %13, ptr %stack.ptr_6)
  %14 = getelementptr %program, ptr %arg_0, i32 0, i32 5
  call ccc void @eclair_btree_insert_range_delta_b_b(ptr %14, ptr %stack.ptr_5, ptr %stack.ptr_6)
  br label %loop_0
loop_0:
  %15 = getelementptr %program, ptr %arg_0, i32 0, i32 8
  call ccc void @eclair_btree_clear_0(ptr %15)
  %16 = getelementptr %program, ptr %arg_0, i32 0, i32 7
  call ccc void @eclair_btree_clear_0(ptr %16)
  %17 = getelementptr [1 x i32], ptr %stack.ptr_7, i32 0, i32 0
  store i32 0, ptr %17
  %18 = getelementptr [1 x i32], ptr %stack.ptr_8, i32 0, i32 0
  store i32 4294967295, ptr %18
  %19 = getelementptr %program, ptr %arg_0, i32 0, i32 5
  call ccc void @eclair_btree_lower_bound_0(ptr %19, ptr %stack.ptr_7, ptr %stack.ptr_9)
  %20 = getelementptr %program, ptr %arg_0, i32 0, i32 5
  call ccc void @eclair_btree_upper_bound_0(ptr %20, ptr %stack.ptr_8, ptr %stack.ptr_10)
  br label %loop_1
loop_1:
  %21 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_9, ptr %stack.ptr_10)
  br i1 %21, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %22 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_9)
  %23 = getelementptr [1 x i32], ptr %stack.ptr_11, i32 0, i32 0
  %24 = getelementptr [1 x i32], ptr %22, i32 0, i32 0
  %25 = load i32, ptr %24
  store i32 %25, ptr %23
  %26 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  %27 = call ccc i1 @eclair_btree_contains_0(ptr %26, ptr %stack.ptr_11)
  %28 = select i1 %27, i1 0, i1 1
  br i1 %28, label %if_1, label %end_if_2
if_1:
  %29 = getelementptr [1 x i32], ptr %stack.ptr_12, i32 0, i32 0
  %30 = getelementptr [1 x i32], ptr %22, i32 0, i32 0
  %31 = load i32, ptr %30
  store i32 %31, ptr %29
  %32 = getelementptr [1 x i32], ptr %stack.ptr_13, i32 0, i32 0
  %33 = getelementptr [1 x i32], ptr %22, i32 0, i32 0
  %34 = load i32, ptr %33
  store i32 %34, ptr %32
  %35 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_lower_bound_0(ptr %35, ptr %stack.ptr_12, ptr %stack.ptr_14)
  %36 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_upper_bound_0(ptr %36, ptr %stack.ptr_13, ptr %stack.ptr_15)
  br label %loop_2
loop_2:
  %37 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_14, ptr %stack.ptr_15)
  br i1 %37, label %if_2, label %end_if_1
if_2:
  br label %range_query.end_1
end_if_1:
  %38 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_14)
  %39 = getelementptr [1 x i32], ptr %stack.ptr_16, i32 0, i32 0
  %40 = getelementptr [1 x i32], ptr %22, i32 0, i32 0
  %41 = load i32, ptr %40
  store i32 %41, ptr %39
  %42 = getelementptr %program, ptr %arg_0, i32 0, i32 8
  %43 = call ccc i1 @eclair_btree_insert_value_0(ptr %42, ptr %stack.ptr_16)
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_14)
  br label %loop_2
range_query.end_1:
  br label %end_if_2
end_if_2:
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_9)
  br label %loop_1
range_query.end:
  %44 = getelementptr [1 x i32], ptr %stack.ptr_17, i32 0, i32 0
  store i32 0, ptr %44
  %45 = getelementptr [1 x i32], ptr %stack.ptr_18, i32 0, i32 0
  store i32 4294967295, ptr %45
  %46 = getelementptr %program, ptr %arg_0, i32 0, i32 6
  call ccc void @eclair_btree_lower_bound_0(ptr %46, ptr %stack.ptr_17, ptr %stack.ptr_19)
  %47 = getelementptr %program, ptr %arg_0, i32 0, i32 6
  call ccc void @eclair_btree_upper_bound_0(ptr %47, ptr %stack.ptr_18, ptr %stack.ptr_20)
  br label %loop_3
loop_3:
  %48 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_19, ptr %stack.ptr_20)
  br i1 %48, label %if_3, label %end_if_3
if_3:
  br label %range_query.end_2
end_if_3:
  %49 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_19)
  %50 = getelementptr [1 x i32], ptr %stack.ptr_21, i32 0, i32 0
  %51 = getelementptr [1 x i32], ptr %49, i32 0, i32 0
  %52 = load i32, ptr %51
  store i32 %52, ptr %50
  %53 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  %54 = call ccc i1 @eclair_btree_contains_0(ptr %53, ptr %stack.ptr_21)
  %55 = select i1 %54, i1 0, i1 1
  br i1 %55, label %if_4, label %end_if_5
if_4:
  %56 = getelementptr [1 x i32], ptr %stack.ptr_22, i32 0, i32 0
  %57 = getelementptr [1 x i32], ptr %49, i32 0, i32 0
  %58 = load i32, ptr %57
  store i32 %58, ptr %56
  %59 = getelementptr [1 x i32], ptr %stack.ptr_23, i32 0, i32 0
  %60 = getelementptr [1 x i32], ptr %49, i32 0, i32 0
  %61 = load i32, ptr %60
  store i32 %61, ptr %59
  %62 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_lower_bound_0(ptr %62, ptr %stack.ptr_22, ptr %stack.ptr_24)
  %63 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_upper_bound_0(ptr %63, ptr %stack.ptr_23, ptr %stack.ptr_25)
  br label %loop_4
loop_4:
  %64 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_24, ptr %stack.ptr_25)
  br i1 %64, label %if_5, label %end_if_4
if_5:
  br label %range_query.end_3
end_if_4:
  %65 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_24)
  %66 = getelementptr [1 x i32], ptr %stack.ptr_26, i32 0, i32 0
  %67 = getelementptr [1 x i32], ptr %49, i32 0, i32 0
  %68 = load i32, ptr %67
  store i32 %68, ptr %66
  %69 = getelementptr %program, ptr %arg_0, i32 0, i32 7
  %70 = call ccc i1 @eclair_btree_insert_value_0(ptr %69, ptr %stack.ptr_26)
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_24)
  br label %loop_4
range_query.end_3:
  br label %end_if_5
end_if_5:
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_19)
  br label %loop_3
range_query.end_2:
  %71 = getelementptr %program, ptr %arg_0, i32 0, i32 7
  %72 = call ccc i1 @eclair_btree_is_empty_0(ptr %71)
  br i1 %72, label %if_6, label %end_if_7
if_6:
  %73 = getelementptr %program, ptr %arg_0, i32 0, i32 8
  %74 = call ccc i1 @eclair_btree_is_empty_0(ptr %73)
  br i1 %74, label %if_7, label %end_if_6
if_7:
  br label %loop.end
end_if_6:
  br label %end_if_7
end_if_7:
  %75 = getelementptr %program, ptr %arg_0, i32 0, i32 8
  call ccc void @eclair_btree_begin_0(ptr %75, ptr %stack.ptr_27)
  %76 = getelementptr %program, ptr %arg_0, i32 0, i32 8
  call ccc void @eclair_btree_end_0(ptr %76, ptr %stack.ptr_28)
  %77 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_insert_range_c_new_c(ptr %77, ptr %stack.ptr_27, ptr %stack.ptr_28)
  %78 = getelementptr %program, ptr %arg_0, i32 0, i32 8
  %79 = getelementptr %program, ptr %arg_0, i32 0, i32 6
  call ccc void @eclair_btree_swap_0(ptr %78, ptr %79)
  %80 = getelementptr %program, ptr %arg_0, i32 0, i32 7
  call ccc void @eclair_btree_begin_0(ptr %80, ptr %stack.ptr_29)
  %81 = getelementptr %program, ptr %arg_0, i32 0, i32 7
  call ccc void @eclair_btree_end_0(ptr %81, ptr %stack.ptr_30)
  %82 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_insert_range_b_new_b(ptr %82, ptr %stack.ptr_29, ptr %stack.ptr_30)
  %83 = getelementptr %program, ptr %arg_0, i32 0, i32 7
  %84 = getelementptr %program, ptr %arg_0, i32 0, i32 5
  call ccc void @eclair_btree_swap_0(ptr %83, ptr %84)
  br label %loop_0
loop.end:
  %85 = getelementptr [1 x i32], ptr %stack.ptr_31, i32 0, i32 0
  store i32 0, ptr %85
  %86 = getelementptr [1 x i32], ptr %stack.ptr_32, i32 0, i32 0
  store i32 4294967295, ptr %86
  %87 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_0(ptr %87, ptr %stack.ptr_31, ptr %stack.ptr_33)
  %88 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_0(ptr %88, ptr %stack.ptr_32, ptr %stack.ptr_34)
  br label %loop_5
loop_5:
  %89 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_33, ptr %stack.ptr_34)
  br i1 %89, label %if_8, label %end_if_8
if_8:
  br label %range_query.end_4
end_if_8:
  %90 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_33)
  %91 = getelementptr [1 x i32], ptr %stack.ptr_35, i32 0, i32 0
  %92 = getelementptr [1 x i32], ptr %90, i32 0, i32 0
  %93 = load i32, ptr %92
  store i32 %93, ptr %91
  %94 = getelementptr [1 x i32], ptr %stack.ptr_36, i32 0, i32 0
  %95 = getelementptr [1 x i32], ptr %90, i32 0, i32 0
  %96 = load i32, ptr %95
  store i32 %96, ptr %94
  %97 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_lower_bound_0(ptr %97, ptr %stack.ptr_35, ptr %stack.ptr_37)
  %98 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_upper_bound_0(ptr %98, ptr %stack.ptr_36, ptr %stack.ptr_38)
  br label %loop_6
loop_6:
  %99 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_37, ptr %stack.ptr_38)
  br i1 %99, label %if_9, label %end_if_9
if_9:
  br label %range_query.end_5
end_if_9:
  %100 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_37)
  %101 = getelementptr [1 x i32], ptr %stack.ptr_39, i32 0, i32 0
  %102 = getelementptr [1 x i32], ptr %90, i32 0, i32 0
  %103 = load i32, ptr %102
  store i32 %103, ptr %101
  %104 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  %105 = call ccc i1 @eclair_btree_insert_value_0(ptr %104, ptr %stack.ptr_39)
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_37)
  br label %loop_6
range_query.end_5:
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_33)
  br label %loop_5
range_query.end_4:
  ret void
}
