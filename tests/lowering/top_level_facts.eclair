// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_init" > %t/actual_eclair_program_init_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_destroy" > %t/actual_eclair_program_destroy_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_init_llvm.out %t/actual_eclair_program_init_llvm.out
// RUN: diff %t/expected_eclair_program_destroy_llvm.out %t/actual_eclair_program_destroy_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

//--- program.eclair
@def edge(u32, u32) output.
@def another(u32, u32, u32) output.

edge(1, 2).
edge(2, 3).

another(1,2,3).

//--- expected_ra.out
project (1, 2, 3) into another
project (2, 3) into edge
project (1, 2) into edge
//--- expected_eir.out
declare_type Program
{
  symbol_table
  another btree(num_columns=3, index=[0,1,2], block_size=256, search_type=linear)
  edge btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  another.init_empty(program.1)
  edge.init_empty(program.2)
  symbol_table.insert(program.0, "edge")
  symbol_table.insert(program.0, "another")
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  another.destroy(FN_ARG[0].1)
  edge.destroy(FN_ARG[0].2)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  value = another.stack_allocate Value
  value.0 = 1
  value.1 = 2
  value.2 = 3
  another.insert(FN_ARG[0].1, value)
  value_1 = edge.stack_allocate Value
  value_1.0 = 2
  value_1.1 = 3
  edge.insert(FN_ARG[0].2, value_1)
  value_2 = edge.stack_allocate Value
  value_2.0 = 1
  value_2.1 = 2
  edge.insert(FN_ARG[0].2, value_2)
}
//--- expected_eclair_program_init_llvm.out
define external ccc %program* @eclair_program_init() "wasm-export-name"="eclair_program_init" {
start:
  %stack.ptr_0 = alloca %symbol_t, i32 1
  %stack.ptr_1 = alloca %symbol_t, i32 1
  %0 = call ccc i8* @malloc(i32 1592)
  %1 = bitcast i8* %0 to %program*
  %2 = getelementptr %program, %program* %1, i32 0, i32 0
  call ccc void @eclair_symbol_table_init(%symbol_table* %2)
  %3 = getelementptr %program, %program* %1, i32 0, i32 1
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %3)
  %4 = getelementptr %program, %program* %1, i32 0, i32 2
  call ccc void @eclair_btree_init_empty_1(%btree_t_1* %4)
  %5 = getelementptr %program, %program* %1, i32 0, i32 0
  %6 = getelementptr inbounds [5 x i8], [5 x i8]* @string_literal_0, i32 0, i32 0
  %7 = zext i32 4 to i64
  %8 = call ccc i8* @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %6, i64 %7, i1 0)
  call ccc void @eclair_symbol_init(%symbol_t* %stack.ptr_0, i32 4, i8* %8)
  %9 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %5, %symbol_t* %stack.ptr_0)
  %10 = getelementptr %program, %program* %1, i32 0, i32 0
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* @string_literal_1, i32 0, i32 0
  %12 = zext i32 7 to i64
  %13 = call ccc i8* @malloc(i32 7)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %11, i64 %12, i1 0)
  call ccc void @eclair_symbol_init(%symbol_t* %stack.ptr_1, i32 7, i8* %13)
  %14 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %10, %symbol_t* %stack.ptr_1)
  ret %program* %1
}
//--- expected_eclair_program_destroy_llvm.out
define external ccc void @eclair_program_destroy(%program* %arg_0) "wasm-export-name"="eclair_program_destroy" {
start:
  %0 = getelementptr %program, %program* %arg_0, i32 0, i32 0
  call ccc void @eclair_symbol_table_destroy(%symbol_table* %0)
  %1 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %1)
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_destroy_1(%btree_t_1* %2)
  %3 = bitcast %program* %arg_0 to i8*
  call ccc void @free(i8* %3)
  ret void
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %stack.ptr_0 = alloca [3 x i32], i32 1
  %stack.ptr_1 = alloca [2 x i32], i32 1
  %stack.ptr_2 = alloca [2 x i32], i32 1
  %0 = getelementptr [3 x i32], [3 x i32]* %stack.ptr_0, i32 0, i32 0
  store i32 1, i32* %0
  %1 = getelementptr [3 x i32], [3 x i32]* %stack.ptr_0, i32 0, i32 1
  store i32 2, i32* %1
  %2 = getelementptr [3 x i32], [3 x i32]* %stack.ptr_0, i32 0, i32 2
  store i32 3, i32* %2
  %3 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  %4 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %3, [3 x i32]* %stack.ptr_0)
  %5 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_1, i32 0, i32 0
  store i32 2, i32* %5
  %6 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_1, i32 0, i32 1
  store i32 3, i32* %6
  %7 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %8 = call ccc i1 @eclair_btree_insert_value_1(%btree_t_1* %7, [2 x i32]* %stack.ptr_1)
  %9 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_2, i32 0, i32 0
  store i32 1, i32* %9
  %10 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_2, i32 0, i32 1
  store i32 2, i32* %10
  %11 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %12 = call ccc i1 @eclair_btree_insert_value_1(%btree_t_1* %11, [2 x i32]* %stack.ptr_2)
  ret void
}
