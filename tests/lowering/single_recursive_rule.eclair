// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// NOTE: program for now also contains delta_ and new_ relations,
// probably it's more efficient to move these to the stack (but left out of scope for now)
// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "program = " > %t/actual_eclair_program_type.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_init" > %t/actual_eclair_program_init_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_destroy" > %t/actual_eclair_program_destroy_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_type.out %t/actual_eclair_program_type.out
// RUN: diff %t/expected_eclair_program_init_llvm.out %t/actual_eclair_program_init_llvm.out
// RUN: diff %t/expected_eclair_program_destroy_llvm.out %t/actual_eclair_program_destroy_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

//--- program.eclair
@def edge(u32, u32).
@def path(u32, u32) output.

edge(1,2).

path(x, y) :-
  edge(x, z),
  path(z, y).

//--- expected_ra.out
project (1, 2) into edge
merge path delta_path
loop do
  purge new_path
  search edge as edge0 do
    search delta_path as delta_path1 where (edge0[1] = delta_path1[0]) do
      if (edge0[0], delta_path1[1]) âˆ‰ path do
        project (edge0[0], delta_path1[1]) into new_path
  exit if counttuples(new_path) = 0
  merge new_path path
  swap new_path delta_path
//--- expected_eir.out
declare_type Program
{
  symbol_table
  delta_path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  edge btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  new_path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  delta_path.init_empty(program.1)
  edge.init_empty(program.2)
  new_path.init_empty(program.3)
  path.init_empty(program.4)
  symbol_table.insert(program.0, "edge")
  symbol_table.insert(program.0, "path")
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  delta_path.destroy(FN_ARG[0].1)
  edge.destroy(FN_ARG[0].2)
  new_path.destroy(FN_ARG[0].3)
  path.destroy(FN_ARG[0].4)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  value = edge.stack_allocate Value
  value.0 = 1
  value.1 = 2
  edge.insert(FN_ARG[0].2, value)
  begin_iter = path.stack_allocate Iter
  end_iter = path.stack_allocate Iter
  path.iter_begin(FN_ARG[0].4, begin_iter)
  path.iter_end(FN_ARG[0].4, end_iter)
  delta_path.insert_range<path[0, 1]>(FN_ARG[0].1, begin_iter, end_iter)
  loop
  {
    new_path.purge(FN_ARG[0].3)
    lower_bound_value = edge.stack_allocate Value
    upper_bound_value = edge.stack_allocate Value
    lower_bound_value.0 = 0
    lower_bound_value.1 = 0
    upper_bound_value.0 = 4294967295
    upper_bound_value.1 = 4294967295
    begin_iter_1 = edge.stack_allocate Iter
    end_iter_1 = edge.stack_allocate Iter
    edge.iter_lower_bound(FN_ARG[0].2, lower_bound_value, begin_iter_1)
    edge.iter_upper_bound(FN_ARG[0].2, upper_bound_value, end_iter_1)
    loop
    {
      condition = edge.iter_is_equal(begin_iter_1, end_iter_1)
      if (condition)
      {
        goto range_query.end
      }
      current = edge.iter_current(begin_iter_1)
      lower_bound_value_1 = path.stack_allocate Value
      upper_bound_value_1 = path.stack_allocate Value
      lower_bound_value_1.0 = current.1
      lower_bound_value_1.1 = 0
      upper_bound_value_1.0 = current.1
      upper_bound_value_1.1 = 4294967295
      begin_iter_2 = path.stack_allocate Iter
      end_iter_2 = path.stack_allocate Iter
      delta_path.iter_lower_bound(FN_ARG[0].1, lower_bound_value_1, begin_iter_2)
      delta_path.iter_upper_bound(FN_ARG[0].1, upper_bound_value_1, end_iter_2)
      loop
      {
        condition_1 = delta_path.iter_is_equal(begin_iter_2, end_iter_2)
        if (condition_1)
        {
          goto range_query.end_1
        }
        current_1 = delta_path.iter_current(begin_iter_2)
        value_1 = path.stack_allocate Value
        value_1.0 = current.0
        value_1.1 = current_1.1
        contains_result = path.contains(FN_ARG[0].4, value_1)
        condition_2 = not contains_result
        if (condition_2)
        {
          value_2 = path.stack_allocate Value
          value_2.0 = current.0
          value_2.1 = current_1.1
          new_path.insert(FN_ARG[0].3, value_2)
        }
        delta_path.iter_next(begin_iter_2)
      }
      range_query.end_1:
      edge.iter_next(begin_iter_1)
    }
    range_query.end:
    condition_3 = new_path.is_empty(FN_ARG[0].3)
    if (condition_3)
    {
      goto loop.end
    }
    begin_iter_3 = path.stack_allocate Iter
    end_iter_3 = path.stack_allocate Iter
    new_path.iter_begin(FN_ARG[0].3, begin_iter_3)
    new_path.iter_end(FN_ARG[0].3, end_iter_3)
    path.insert_range<new_path[0, 1]>(FN_ARG[0].4, begin_iter_3, end_iter_3)
    new_path.swap(FN_ARG[0].3, FN_ARG[0].1)
  }
  loop.end:
}
//--- expected_eclair_program_type.out
%program = type {%symbol_table, %btree_t_0, %btree_t_0, %btree_t_0, %btree_t_0}
//--- expected_eclair_program_init_llvm.out
define external ccc %program* @eclair_program_init() "wasm-export-name"="eclair_program_init" {
start:
  %stack.ptr_0 = alloca %symbol_t, i32 1
  %stack.ptr_1 = alloca %symbol_t, i32 1
  %0 = call ccc i8* @malloc(i32 1624)
  %1 = bitcast i8* %0 to %program*
  %2 = getelementptr %program, %program* %1, i32 0, i32 0
  call ccc void @eclair_symbol_table_init(%symbol_table* %2)
  %3 = getelementptr %program, %program* %1, i32 0, i32 1
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %3)
  %4 = getelementptr %program, %program* %1, i32 0, i32 2
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %4)
  %5 = getelementptr %program, %program* %1, i32 0, i32 3
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %5)
  %6 = getelementptr %program, %program* %1, i32 0, i32 4
  call ccc void @eclair_btree_init_empty_0(%btree_t_0* %6)
  %7 = getelementptr %program, %program* %1, i32 0, i32 0
  %8 = getelementptr inbounds [5 x i8], [5 x i8]* @string_literal_0, i32 0, i32 0
  %9 = zext i32 4 to i64
  %10 = call ccc i8* @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %8, i64 %9, i1 0)
  call ccc void @eclair_symbol_init(%symbol_t* %stack.ptr_0, i32 4, i8* %10)
  %11 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %7, %symbol_t* %stack.ptr_0)
  %12 = getelementptr %program, %program* %1, i32 0, i32 0
  %13 = getelementptr inbounds [5 x i8], [5 x i8]* @string_literal_1, i32 0, i32 0
  %14 = zext i32 4 to i64
  %15 = call ccc i8* @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %13, i64 %14, i1 0)
  call ccc void @eclair_symbol_init(%symbol_t* %stack.ptr_1, i32 4, i8* %15)
  %16 = call ccc i32 @eclair_symbol_table_find_or_insert(%symbol_table* %12, %symbol_t* %stack.ptr_1)
  ret %program* %1
}
//--- expected_eclair_program_destroy_llvm.out
define external ccc void @eclair_program_destroy(%program* %arg_0) "wasm-export-name"="eclair_program_destroy" {
start:
  %0 = getelementptr %program, %program* %arg_0, i32 0, i32 0
  call ccc void @eclair_symbol_table_destroy(%symbol_table* %0)
  %1 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %1)
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %2)
  %3 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %3)
  %4 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_destroy_0(%btree_t_0* %4)
  %5 = bitcast %program* %arg_0 to i8*
  call ccc void @free(i8* %5)
  ret void
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %stack.ptr_0 = alloca [2 x i32], i32 1
  %stack.ptr_1 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_2 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_3 = alloca [2 x i32], i32 1
  %stack.ptr_4 = alloca [2 x i32], i32 1
  %stack.ptr_5 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_6 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_7 = alloca [2 x i32], i32 1
  %stack.ptr_8 = alloca [2 x i32], i32 1
  %stack.ptr_9 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_10 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_11 = alloca [2 x i32], i32 1
  %stack.ptr_12 = alloca [2 x i32], i32 1
  %stack.ptr_13 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_14 = alloca %btree_iterator_t_0, i32 1
  %0 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_0, i32 0, i32 0
  store i32 1, i32* %0
  %1 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_0, i32 0, i32 1
  store i32 2, i32* %1
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %3 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %2, [2 x i32]* %stack.ptr_0)
  %4 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_begin_0(%btree_t_0* %4, %btree_iterator_t_0* %stack.ptr_1)
  %5 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_end_0(%btree_t_0* %5, %btree_iterator_t_0* %stack.ptr_2)
  %6 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_insert_range_delta_path_path(%btree_t_0* %6, %btree_iterator_t_0* %stack.ptr_1, %btree_iterator_t_0* %stack.ptr_2)
  br label %loop_0
loop_0:
  %7 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_clear_0(%btree_t_0* %7)
  %8 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_3, i32 0, i32 0
  store i32 0, i32* %8
  %9 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_3, i32 0, i32 1
  store i32 0, i32* %9
  %10 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_4, i32 0, i32 0
  store i32 4294967295, i32* %10
  %11 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_4, i32 0, i32 1
  store i32 4294967295, i32* %11
  %12 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %12, [2 x i32]* %stack.ptr_3, %btree_iterator_t_0* %stack.ptr_5)
  %13 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %13, [2 x i32]* %stack.ptr_4, %btree_iterator_t_0* %stack.ptr_6)
  br label %loop_1
loop_1:
  %14 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_5, %btree_iterator_t_0* %stack.ptr_6)
  br i1 %14, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %15 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_5)
  %16 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_7, i32 0, i32 0
  %17 = getelementptr [2 x i32], [2 x i32]* %15, i32 0, i32 1
  %18 = load i32, i32* %17
  store i32 %18, i32* %16
  %19 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_7, i32 0, i32 1
  store i32 0, i32* %19
  %20 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_8, i32 0, i32 0
  %21 = getelementptr [2 x i32], [2 x i32]* %15, i32 0, i32 1
  %22 = load i32, i32* %21
  store i32 %22, i32* %20
  %23 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_8, i32 0, i32 1
  store i32 4294967295, i32* %23
  %24 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(%btree_t_0* %24, [2 x i32]* %stack.ptr_7, %btree_iterator_t_0* %stack.ptr_9)
  %25 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(%btree_t_0* %25, [2 x i32]* %stack.ptr_8, %btree_iterator_t_0* %stack.ptr_10)
  br label %loop_2
loop_2:
  %26 = call ccc i1 @eclair_btree_iterator_is_equal_0(%btree_iterator_t_0* %stack.ptr_9, %btree_iterator_t_0* %stack.ptr_10)
  br i1 %26, label %if_1, label %end_if_1
if_1:
  br label %range_query.end_1
end_if_1:
  %27 = call ccc [2 x i32]* @eclair_btree_iterator_current_0(%btree_iterator_t_0* %stack.ptr_9)
  %28 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_11, i32 0, i32 0
  %29 = getelementptr [2 x i32], [2 x i32]* %15, i32 0, i32 0
  %30 = load i32, i32* %29
  store i32 %30, i32* %28
  %31 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_11, i32 0, i32 1
  %32 = getelementptr [2 x i32], [2 x i32]* %27, i32 0, i32 1
  %33 = load i32, i32* %32
  store i32 %33, i32* %31
  %34 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  %35 = call ccc i1 @eclair_btree_contains_0(%btree_t_0* %34, [2 x i32]* %stack.ptr_11)
  %36 = select i1 %35, i1 0, i1 1
  br i1 %36, label %if_2, label %end_if_2
if_2:
  %37 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_12, i32 0, i32 0
  %38 = getelementptr [2 x i32], [2 x i32]* %15, i32 0, i32 0
  %39 = load i32, i32* %38
  store i32 %39, i32* %37
  %40 = getelementptr [2 x i32], [2 x i32]* %stack.ptr_12, i32 0, i32 1
  %41 = getelementptr [2 x i32], [2 x i32]* %27, i32 0, i32 1
  %42 = load i32, i32* %41
  store i32 %42, i32* %40
  %43 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %44 = call ccc i1 @eclair_btree_insert_value_0(%btree_t_0* %43, [2 x i32]* %stack.ptr_12)
  br label %end_if_2
end_if_2:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_9)
  br label %loop_2
range_query.end_1:
  call ccc void @eclair_btree_iterator_next_0(%btree_iterator_t_0* %stack.ptr_5)
  br label %loop_1
range_query.end:
  %45 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %46 = call ccc i1 @eclair_btree_is_empty_0(%btree_t_0* %45)
  br i1 %46, label %if_3, label %end_if_3
if_3:
  br label %loop.end
end_if_3:
  %47 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_begin_0(%btree_t_0* %47, %btree_iterator_t_0* %stack.ptr_13)
  %48 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_end_0(%btree_t_0* %48, %btree_iterator_t_0* %stack.ptr_14)
  %49 = getelementptr %program, %program* %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_insert_range_path_new_path(%btree_t_0* %49, %btree_iterator_t_0* %stack.ptr_13, %btree_iterator_t_0* %stack.ptr_14)
  %50 = getelementptr %program, %program* %arg_0, i32 0, i32 3
  %51 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_swap_0(%btree_t_0* %50, %btree_t_0* %51)
  br label %loop_0
loop.end:
  ret void
}
