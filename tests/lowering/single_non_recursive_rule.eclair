// RUN: split-file %s %t

// RUN: %eclair compile --emit ra %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "program = " > %t/actual_eclair_program_type.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_init" > %t/actual_eclair_program_init_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_destroy" > %t/actual_eclair_program_destroy_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_type.out %t/actual_eclair_program_type.out
// RUN: diff %t/expected_eclair_program_init_llvm.out %t/actual_eclair_program_init_llvm.out
// RUN: diff %t/expected_eclair_program_destroy_llvm.out %t/actual_eclair_program_destroy_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

//--- program.eclair
@def edge(u32, u32).
@def path(u32, u32).

edge(1,2).

path(x,y) :-
  edge(x,y).

//--- expected_ra.out
project (1, 2) into edge
search edge as edge0 do
  project (edge0[0], edge0[1]) into path
//--- expected_eir.out
declare_type Program
{
  symbol_table
  edge btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  edge.init_empty(program.1)
  path.init_empty(program.2)
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  edge.destroy(FN_ARG[0].1)
  path.destroy(FN_ARG[0].2)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  value = edge.stack_allocate Value
  value.0 = 1
  value.1 = 2
  edge.insert(FN_ARG[0].1, value)
  value_1 = edge.stack_allocate Value
  value_1.0 = 0
  value_1.1 = 0
  value_2 = edge.stack_allocate Value
  value_2.0 = 4294967295
  value_2.1 = 4294967295
  begin_iter = edge.stack_allocate Iter
  end_iter = edge.stack_allocate Iter
  edge.iter_lower_bound(FN_ARG[0].1, value_1, begin_iter)
  edge.iter_upper_bound(FN_ARG[0].1, value_2, end_iter)
  loop
  {
    condition = edge.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = edge.iter_current(begin_iter)
    value_3 = path.stack_allocate Value
    value_3.0 = current.0
    value_3.1 = current.1
    path.insert(FN_ARG[0].2, value_3)
    edge.iter_next(begin_iter)
  }
  range_query.end:
}
//--- expected_eclair_program_type.out
%program = type {%symbol_table, %btree_t_0, %btree_t_0}
//--- expected_eclair_program_init_llvm.out
define external ccc %program* @eclair_program_init() "wasm-export-name"="eclair_program_init" {
start:
  %memory_0 = call ccc i8* @malloc(i32 1592)
  %program_0 = bitcast i8* %memory_0 to %program*
  %0 = getelementptr %program, %program* %program_0, i32 0, i32 0
  call ccc void @symbol_table_init(%symbol_table* %0)
  %1 = getelementptr %program, %program* %program_0, i32 0, i32 1
  call ccc void @btree_init_empty_0(%btree_t_0* %1)
  %2 = getelementptr %program, %program* %program_0, i32 0, i32 2
  call ccc void @btree_init_empty_0(%btree_t_0* %2)
  ret %program* %program_0
}
//--- expected_eclair_program_destroy_llvm.out
define external ccc void @eclair_program_destroy(%program* %arg_0) "wasm-export-name"="eclair_program_destroy" {
start:
  %0 = getelementptr %program, %program* %arg_0, i32 0, i32 0
  call ccc void @symbol_table_destroy(%symbol_table* %0)
  %1 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_destroy_0(%btree_t_0* %1)
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  call ccc void @btree_destroy_0(%btree_t_0* %2)
  %memory_0 = bitcast %program* %arg_0 to i8*
  call ccc void @free(i8* %memory_0)
  ret void
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(%program* %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %value_0 = alloca [2 x i32], i32 1
  %0 = getelementptr [2 x i32], [2 x i32]* %value_0, i32 0, i32 0
  store i32 1, i32* %0
  %1 = getelementptr [2 x i32], [2 x i32]* %value_0, i32 0, i32 1
  store i32 2, i32* %1
  %2 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  %3 = call ccc i1 @btree_insert_value_0(%btree_t_0* %2, [2 x i32]* %value_0)
  %value_1_0 = alloca [2 x i32], i32 1
  %4 = getelementptr [2 x i32], [2 x i32]* %value_1_0, i32 0, i32 0
  store i32 0, i32* %4
  %5 = getelementptr [2 x i32], [2 x i32]* %value_1_0, i32 0, i32 1
  store i32 0, i32* %5
  %value_2_0 = alloca [2 x i32], i32 1
  %6 = getelementptr [2 x i32], [2 x i32]* %value_2_0, i32 0, i32 0
  store i32 4294967295, i32* %6
  %7 = getelementptr [2 x i32], [2 x i32]* %value_2_0, i32 0, i32 1
  store i32 4294967295, i32* %7
  %begin_iter_0 = alloca %btree_iterator_t_0, i32 1
  %end_iter_0 = alloca %btree_iterator_t_0, i32 1
  %8 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_lower_bound_0(%btree_t_0* %8, [2 x i32]* %value_1_0, %btree_iterator_t_0* %begin_iter_0)
  %9 = getelementptr %program, %program* %arg_0, i32 0, i32 1
  call ccc void @btree_upper_bound_0(%btree_t_0* %9, [2 x i32]* %value_2_0, %btree_iterator_t_0* %end_iter_0)
  br label %loop_0
loop_0:
  %condition_0 = call ccc i1 @btree_iterator_is_equal_0(%btree_iterator_t_0* %begin_iter_0, %btree_iterator_t_0* %end_iter_0)
  br i1 %condition_0, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %current_0 = call ccc [2 x i32]* @btree_iterator_current_0(%btree_iterator_t_0* %begin_iter_0)
  %value_3_0 = alloca [2 x i32], i32 1
  %10 = getelementptr [2 x i32], [2 x i32]* %value_3_0, i32 0, i32 0
  %11 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 0
  %12 = load i32, i32* %11
  store i32 %12, i32* %10
  %13 = getelementptr [2 x i32], [2 x i32]* %value_3_0, i32 0, i32 1
  %14 = getelementptr [2 x i32], [2 x i32]* %current_0, i32 0, i32 1
  %15 = load i32, i32* %14
  store i32 %15, i32* %13
  %16 = getelementptr %program, %program* %arg_0, i32 0, i32 2
  %17 = call ccc i1 @btree_insert_value_0(%btree_t_0* %16, [2 x i32]* %value_3_0)
  call ccc void @btree_iterator_next_0(%btree_iterator_t_0* %begin_iter_0)
  br label %loop_0
range_query.end:
  ret void
}
