// RUN: split-file %s %t

// RUN: %eclair compile --emit ra-transformed %t/program.eclair > %t/actual_ra.out
// RUN: diff %t/expected_ra.out %t/actual_ra.out

// RUN: %eclair compile --emit eir %t/program.eclair > %t/actual_eir.out
// RUN: diff %t/expected_eir.out %t/actual_eir.out

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "program = " > %t/actual_eclair_program_type.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_init" > %t/actual_eclair_program_init_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_destroy" > %t/actual_eclair_program_destroy_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_program_run" > %t/actual_eclair_program_run_llvm.out
// RUN: diff %t/expected_eclair_program_type.out %t/actual_eclair_program_type.out
// RUN: diff %t/expected_eclair_program_init_llvm.out %t/actual_eclair_program_init_llvm.out
// RUN: diff %t/expected_eclair_program_destroy_llvm.out %t/actual_eclair_program_destroy_llvm.out
// RUN: diff %t/expected_eclair_program_run_llvm.out %t/actual_eclair_program_run_llvm.out

// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_add_facts" > %t/actual_eclair_add_facts_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_get_facts" > %t/actual_eclair_get_facts_llvm.out
// RUN: diff %t/expected_eclair_add_facts_llvm.out %t/actual_eclair_add_facts_llvm.out
// RUN: diff %t/expected_eclair_get_facts_llvm.out %t/actual_eclair_get_facts_llvm.out

//--- program.eclair
@def edge(u32, u32) input.
@def path(u32, u32) output.

path(x, y) :-
  edge(x, y).

path(x, z) :-
  edge(x, y),
  path(y, z).

//--- expected_ra.out
search edge as edge0 do
  project (edge0[0], edge0[1]) into path
merge path delta_path
loop do
  purge new_path
  search edge as edge0 do
    search delta_path as delta_path1 where (edge0[1] = delta_path1[0]) do
      if (edge0[0], delta_path1[1]) âˆ‰ path do
        project (edge0[0], delta_path1[1]) into new_path
  exit if counttuples(new_path) = 0
  merge new_path path
  swap new_path delta_path
//--- expected_eir.out
declare_type Program
{
  symbol_table
  delta_path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  edge btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  new_path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
  path btree(num_columns=2, index=[0,1], block_size=256, search_type=linear)
}

export fn eclair_program_init() -> *Program
{
  program = heap_allocate_program
  symbol_table.init(program.0)
  delta_path.init_empty(program.1)
  edge.init_empty(program.2)
  new_path.init_empty(program.3)
  path.init_empty(program.4)
  symbol_table.insert(program.0, "edge")
  symbol_table.insert(program.0, "path")
  return program
}

export fn eclair_program_destroy(*Program) -> Void
{
  symbol_table.destroy(FN_ARG[0].0)
  delta_path.destroy(FN_ARG[0].1)
  edge.destroy(FN_ARG[0].2)
  new_path.destroy(FN_ARG[0].3)
  path.destroy(FN_ARG[0].4)
  free_program(FN_ARG[0])
}

export fn eclair_program_run(*Program) -> Void
{
  lower_bound_value = edge.stack_allocate Value
  upper_bound_value = edge.stack_allocate Value
  lower_bound_value.0 = 0
  lower_bound_value.1 = 0
  upper_bound_value.0 = 4294967295
  upper_bound_value.1 = 4294967295
  begin_iter = edge.stack_allocate Iter
  end_iter = edge.stack_allocate Iter
  edge.iter_lower_bound(FN_ARG[0].2, lower_bound_value, begin_iter)
  edge.iter_upper_bound(FN_ARG[0].2, upper_bound_value, end_iter)
  loop
  {
    condition = edge.iter_is_equal(begin_iter, end_iter)
    if (condition)
    {
      goto range_query.end
    }
    current = edge.iter_current(begin_iter)
    value = path.stack_allocate Value
    value.0 = current.0
    value.1 = current.1
    path.insert(FN_ARG[0].4, value)
    edge.iter_next(begin_iter)
  }
  range_query.end:
  begin_iter_1 = path.stack_allocate Iter
  end_iter_1 = path.stack_allocate Iter
  path.iter_begin(FN_ARG[0].4, begin_iter_1)
  path.iter_end(FN_ARG[0].4, end_iter_1)
  delta_path.insert_range<path[0, 1]>(FN_ARG[0].1, begin_iter_1, end_iter_1)
  loop
  {
    new_path.purge(FN_ARG[0].3)
    lower_bound_value_1 = edge.stack_allocate Value
    upper_bound_value_1 = edge.stack_allocate Value
    lower_bound_value_1.0 = 0
    lower_bound_value_1.1 = 0
    upper_bound_value_1.0 = 4294967295
    upper_bound_value_1.1 = 4294967295
    begin_iter_2 = edge.stack_allocate Iter
    end_iter_2 = edge.stack_allocate Iter
    edge.iter_lower_bound(FN_ARG[0].2, lower_bound_value_1, begin_iter_2)
    edge.iter_upper_bound(FN_ARG[0].2, upper_bound_value_1, end_iter_2)
    loop
    {
      condition_1 = edge.iter_is_equal(begin_iter_2, end_iter_2)
      if (condition_1)
      {
        goto range_query.end_1
      }
      current_1 = edge.iter_current(begin_iter_2)
      lower_bound_value_2 = path.stack_allocate Value
      upper_bound_value_2 = path.stack_allocate Value
      lower_bound_value_2.0 = current_1.1
      lower_bound_value_2.1 = 0
      upper_bound_value_2.0 = current_1.1
      upper_bound_value_2.1 = 4294967295
      begin_iter_3 = path.stack_allocate Iter
      end_iter_3 = path.stack_allocate Iter
      delta_path.iter_lower_bound(FN_ARG[0].1, lower_bound_value_2, begin_iter_3)
      delta_path.iter_upper_bound(FN_ARG[0].1, upper_bound_value_2, end_iter_3)
      loop
      {
        condition_2 = delta_path.iter_is_equal(begin_iter_3, end_iter_3)
        if (condition_2)
        {
          goto range_query.end_2
        }
        current_2 = delta_path.iter_current(begin_iter_3)
        value_1 = path.stack_allocate Value
        value_1.0 = current_1.0
        value_1.1 = current_2.1
        contains_result = path.contains(FN_ARG[0].4, value_1)
        condition_3 = not contains_result
        if (condition_3)
        {
          value_2 = path.stack_allocate Value
          value_2.0 = current_1.0
          value_2.1 = current_2.1
          new_path.insert(FN_ARG[0].3, value_2)
        }
        delta_path.iter_next(begin_iter_3)
      }
      range_query.end_2:
      edge.iter_next(begin_iter_2)
    }
    range_query.end_1:
    condition_4 = new_path.is_empty(FN_ARG[0].3)
    if (condition_4)
    {
      goto loop.end
    }
    begin_iter_4 = path.stack_allocate Iter
    end_iter_4 = path.stack_allocate Iter
    new_path.iter_begin(FN_ARG[0].3, begin_iter_4)
    new_path.iter_end(FN_ARG[0].3, end_iter_4)
    path.insert_range<new_path[0, 1]>(FN_ARG[0].4, begin_iter_4, end_iter_4)
    new_path.swap(FN_ARG[0].3, FN_ARG[0].1)
  }
  loop.end:
}
//--- expected_eclair_program_type.out
%program = type {%symbol_table, %btree_t_0, %btree_t_0, %btree_t_0, %btree_t_0}
//--- expected_eclair_program_init_llvm.out
define external ccc ptr @eclair_program_init() "wasm-export-name"="eclair_program_init" {
start:
  %stack.ptr_0 = alloca %symbol_t, i32 1
  %stack.ptr_1 = alloca %symbol_t, i32 1
  %0 = call ccc ptr @malloc(i32 1624)
  %1 = getelementptr %program, ptr %0, i32 0, i32 0
  call ccc void @eclair_symbol_table_init(ptr %1)
  %2 = getelementptr %program, ptr %0, i32 0, i32 1
  call ccc void @eclair_btree_init_empty_0(ptr %2)
  %3 = getelementptr %program, ptr %0, i32 0, i32 2
  call ccc void @eclair_btree_init_empty_0(ptr %3)
  %4 = getelementptr %program, ptr %0, i32 0, i32 3
  call ccc void @eclair_btree_init_empty_0(ptr %4)
  %5 = getelementptr %program, ptr %0, i32 0, i32 4
  call ccc void @eclair_btree_init_empty_0(ptr %5)
  %6 = getelementptr %program, ptr %0, i32 0, i32 0
  %7 = getelementptr inbounds [5 x i8], ptr @string_literal_0, i32 0, i32 0
  %8 = zext i32 4 to i64
  %9 = call ccc ptr @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(ptr %9, ptr %7, i64 %8, i1 0)
  call ccc void @eclair_symbol_init(ptr %stack.ptr_0, i32 4, ptr %9)
  %10 = call ccc i32 @eclair_symbol_table_find_or_insert(ptr %6, ptr %stack.ptr_0)
  %11 = getelementptr %program, ptr %0, i32 0, i32 0
  %12 = getelementptr inbounds [5 x i8], ptr @string_literal_1, i32 0, i32 0
  %13 = zext i32 4 to i64
  %14 = call ccc ptr @malloc(i32 4)
  call ccc void @llvm.memcpy.p0i8.p0i8.i64(ptr %14, ptr %12, i64 %13, i1 0)
  call ccc void @eclair_symbol_init(ptr %stack.ptr_1, i32 4, ptr %14)
  %15 = call ccc i32 @eclair_symbol_table_find_or_insert(ptr %11, ptr %stack.ptr_1)
  ret ptr %0
}
//--- expected_eclair_program_destroy_llvm.out
define external ccc void @eclair_program_destroy(ptr %arg_0) "wasm-export-name"="eclair_program_destroy" {
start:
  %0 = getelementptr %program, ptr %arg_0, i32 0, i32 0
  call ccc void @eclair_symbol_table_destroy(ptr %0)
  %1 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_destroy_0(ptr %1)
  %2 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_destroy_0(ptr %2)
  %3 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_destroy_0(ptr %3)
  %4 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_destroy_0(ptr %4)
  call ccc void @free(ptr %arg_0)
  ret void
}
//--- expected_eclair_program_run_llvm.out
define external ccc void @eclair_program_run(ptr %arg_0) "wasm-export-name"="eclair_program_run" {
start:
  %stack.ptr_0 = alloca [2 x i32], i32 1
  %stack.ptr_1 = alloca [2 x i32], i32 1
  %stack.ptr_2 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_3 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_4 = alloca [2 x i32], i32 1
  %stack.ptr_5 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_6 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_7 = alloca [2 x i32], i32 1
  %stack.ptr_8 = alloca [2 x i32], i32 1
  %stack.ptr_9 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_10 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_11 = alloca [2 x i32], i32 1
  %stack.ptr_12 = alloca [2 x i32], i32 1
  %stack.ptr_13 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_14 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_15 = alloca [2 x i32], i32 1
  %stack.ptr_16 = alloca [2 x i32], i32 1
  %stack.ptr_17 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_18 = alloca %btree_iterator_t_0, i32 1
  %0 = getelementptr [2 x i32], ptr %stack.ptr_0, i32 0, i32 0
  store i32 0, ptr %0
  %1 = getelementptr [2 x i32], ptr %stack.ptr_0, i32 0, i32 1
  store i32 0, ptr %1
  %2 = getelementptr [2 x i32], ptr %stack.ptr_1, i32 0, i32 0
  store i32 4294967295, ptr %2
  %3 = getelementptr [2 x i32], ptr %stack.ptr_1, i32 0, i32 1
  store i32 4294967295, ptr %3
  %4 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_0(ptr %4, ptr %stack.ptr_0, ptr %stack.ptr_2)
  %5 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_0(ptr %5, ptr %stack.ptr_1, ptr %stack.ptr_3)
  br label %loop_0
loop_0:
  %6 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_2, ptr %stack.ptr_3)
  br i1 %6, label %if_0, label %end_if_0
if_0:
  br label %range_query.end
end_if_0:
  %7 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_2)
  %8 = getelementptr [2 x i32], ptr %stack.ptr_4, i32 0, i32 0
  %9 = getelementptr [2 x i32], ptr %7, i32 0, i32 0
  %10 = load i32, ptr %9
  store i32 %10, ptr %8
  %11 = getelementptr [2 x i32], ptr %stack.ptr_4, i32 0, i32 1
  %12 = getelementptr [2 x i32], ptr %7, i32 0, i32 1
  %13 = load i32, ptr %12
  store i32 %13, ptr %11
  %14 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  %15 = call ccc i1 @eclair_btree_insert_value_0(ptr %14, ptr %stack.ptr_4)
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_2)
  br label %loop_0
range_query.end:
  %16 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_begin_0(ptr %16, ptr %stack.ptr_5)
  %17 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_end_0(ptr %17, ptr %stack.ptr_6)
  %18 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_insert_range_delta_path_path(ptr %18, ptr %stack.ptr_5, ptr %stack.ptr_6)
  br label %loop_1
loop_1:
  %19 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_clear_0(ptr %19)
  %20 = getelementptr [2 x i32], ptr %stack.ptr_7, i32 0, i32 0
  store i32 0, ptr %20
  %21 = getelementptr [2 x i32], ptr %stack.ptr_7, i32 0, i32 1
  store i32 0, ptr %21
  %22 = getelementptr [2 x i32], ptr %stack.ptr_8, i32 0, i32 0
  store i32 4294967295, ptr %22
  %23 = getelementptr [2 x i32], ptr %stack.ptr_8, i32 0, i32 1
  store i32 4294967295, ptr %23
  %24 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_lower_bound_0(ptr %24, ptr %stack.ptr_7, ptr %stack.ptr_9)
  %25 = getelementptr %program, ptr %arg_0, i32 0, i32 2
  call ccc void @eclair_btree_upper_bound_0(ptr %25, ptr %stack.ptr_8, ptr %stack.ptr_10)
  br label %loop_2
loop_2:
  %26 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_9, ptr %stack.ptr_10)
  br i1 %26, label %if_1, label %end_if_1
if_1:
  br label %range_query.end_1
end_if_1:
  %27 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_9)
  %28 = getelementptr [2 x i32], ptr %stack.ptr_11, i32 0, i32 0
  %29 = getelementptr [2 x i32], ptr %27, i32 0, i32 1
  %30 = load i32, ptr %29
  store i32 %30, ptr %28
  %31 = getelementptr [2 x i32], ptr %stack.ptr_11, i32 0, i32 1
  store i32 0, ptr %31
  %32 = getelementptr [2 x i32], ptr %stack.ptr_12, i32 0, i32 0
  %33 = getelementptr [2 x i32], ptr %27, i32 0, i32 1
  %34 = load i32, ptr %33
  store i32 %34, ptr %32
  %35 = getelementptr [2 x i32], ptr %stack.ptr_12, i32 0, i32 1
  store i32 4294967295, ptr %35
  %36 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_lower_bound_0(ptr %36, ptr %stack.ptr_11, ptr %stack.ptr_13)
  %37 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_upper_bound_0(ptr %37, ptr %stack.ptr_12, ptr %stack.ptr_14)
  br label %loop_3
loop_3:
  %38 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_13, ptr %stack.ptr_14)
  br i1 %38, label %if_2, label %end_if_2
if_2:
  br label %range_query.end_2
end_if_2:
  %39 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_13)
  %40 = getelementptr [2 x i32], ptr %stack.ptr_15, i32 0, i32 0
  %41 = getelementptr [2 x i32], ptr %27, i32 0, i32 0
  %42 = load i32, ptr %41
  store i32 %42, ptr %40
  %43 = getelementptr [2 x i32], ptr %stack.ptr_15, i32 0, i32 1
  %44 = getelementptr [2 x i32], ptr %39, i32 0, i32 1
  %45 = load i32, ptr %44
  store i32 %45, ptr %43
  %46 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  %47 = call ccc i1 @eclair_btree_contains_0(ptr %46, ptr %stack.ptr_15)
  %48 = select i1 %47, i1 0, i1 1
  br i1 %48, label %if_3, label %end_if_3
if_3:
  %49 = getelementptr [2 x i32], ptr %stack.ptr_16, i32 0, i32 0
  %50 = getelementptr [2 x i32], ptr %27, i32 0, i32 0
  %51 = load i32, ptr %50
  store i32 %51, ptr %49
  %52 = getelementptr [2 x i32], ptr %stack.ptr_16, i32 0, i32 1
  %53 = getelementptr [2 x i32], ptr %39, i32 0, i32 1
  %54 = load i32, ptr %53
  store i32 %54, ptr %52
  %55 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  %56 = call ccc i1 @eclair_btree_insert_value_0(ptr %55, ptr %stack.ptr_16)
  br label %end_if_3
end_if_3:
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_13)
  br label %loop_3
range_query.end_2:
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_9)
  br label %loop_2
range_query.end_1:
  %57 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  %58 = call ccc i1 @eclair_btree_is_empty_0(ptr %57)
  br i1 %58, label %if_4, label %end_if_4
if_4:
  br label %loop.end
end_if_4:
  %59 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_begin_0(ptr %59, ptr %stack.ptr_17)
  %60 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  call ccc void @eclair_btree_end_0(ptr %60, ptr %stack.ptr_18)
  %61 = getelementptr %program, ptr %arg_0, i32 0, i32 4
  call ccc void @eclair_btree_insert_range_path_new_path(ptr %61, ptr %stack.ptr_17, ptr %stack.ptr_18)
  %62 = getelementptr %program, ptr %arg_0, i32 0, i32 3
  %63 = getelementptr %program, ptr %arg_0, i32 0, i32 1
  call ccc void @eclair_btree_swap_0(ptr %62, ptr %63)
  br label %loop_1
loop.end:
  ret void
}
//--- expected_eclair_add_facts_llvm.out
define external ccc void @eclair_add_facts(ptr %eclair_program_0, i32 %fact_type_0, ptr %memory_0, i32 %fact_count_0) "wasm-export-name"="eclair_add_facts" {
start:
  switch i32 %fact_type_0, label %switch.default_0 [i32 0, label %edge_0]
edge_0:
  %0 = getelementptr %program, ptr %eclair_program_0, i32 0, i32 2
  br label %for_begin_0
for_begin_0:
  %1 = phi i32 [0, %edge_0], [%5, %for_body_0]
  %2 = icmp ult i32 %1, %fact_count_0
  br i1 %2, label %for_body_0, label %for_end_0
for_body_0:
  %3 = getelementptr [2 x i32], ptr %memory_0, i32 %1
  %4 = call ccc i1 @eclair_btree_insert_value_0(ptr %0, ptr %3)
  %5 = add i32 1, %1
  br label %for_begin_0
for_end_0:
  br label %end_0
switch.default_0:
  ret void
end_0:
  ret void
}
//--- expected_eclair_get_facts_llvm.out
define external ccc ptr @eclair_get_facts(ptr %eclair_program_0, i32 %fact_type_0) "wasm-export-name"="eclair_get_facts" {
start:
  %stack.ptr_0 = alloca i32, i32 1
  %stack.ptr_1 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_2 = alloca %btree_iterator_t_0, i32 1
  switch i32 %fact_type_0, label %switch.default_0 [i32 1, label %path_0]
path_0:
  %0 = getelementptr %program, ptr %eclair_program_0, i32 0, i32 4
  %1 = call ccc i64 @eclair_btree_size_0(ptr %0)
  %2 = trunc i64 %1 to i32
  %3 = mul i32 %2, 8
  %4 = call ccc ptr @malloc(i32 %3)
  store i32 0, ptr %stack.ptr_0
  call ccc void @eclair_btree_begin_0(ptr %0, ptr %stack.ptr_1)
  call ccc void @eclair_btree_end_0(ptr %0, ptr %stack.ptr_2)
  br label %while_begin_0
while_begin_0:
  %5 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_1, ptr %stack.ptr_2)
  %6 = select i1 %5, i1 0, i1 1
  br i1 %6, label %while_body_0, label %while_end_0
while_body_0:
  %7 = load i32, ptr %stack.ptr_0
  %8 = getelementptr [2 x i32], ptr %4, i32 %7
  %9 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_1)
  %10 = getelementptr [2 x i32], ptr %9, i32 0
  %11 = load [2 x i32], ptr %10
  %12 = getelementptr [2 x i32], ptr %8, i32 0
  store [2 x i32] %11, ptr %12
  %13 = add i32 %7, 1
  store i32 %13, ptr %stack.ptr_0
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_1)
  br label %while_begin_0
while_end_0:
  ret ptr %4
switch.default_0:
  ret ptr zeroinitializer
}
