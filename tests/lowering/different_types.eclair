// TODO add tests for caching mechanism (e.g. single_nonrecursive_rule test)

// RUN: split-file %s %t

// RUN: %eclair compile --emit llvm %t/program.eclair > %t/actual_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_add_facts" > %t/actual_eclair_add_facts_llvm.out
// RUN: %extract_snippet %t/actual_llvm.out "define.*@eclair_get_facts" > %t/actual_eclair_get_facts_llvm.out
// RUN: diff %t/expected_eclair_add_facts_llvm.out %t/actual_eclair_add_facts_llvm.out
// RUN: diff %t/expected_eclair_get_facts_llvm.out %t/actual_eclair_get_facts_llvm.out

//--- program.eclair
@def a(u32) input output.
@def b(u32, u32, u32) input output.

//--- expected_eclair_add_facts_llvm.out
define external ccc void @eclair_add_facts(ptr %eclair_program_0, i32 %fact_type_0, ptr %memory_0, i32 %fact_count_0) "wasm-export-name"="eclair_add_facts" {
start:
  switch i32 %fact_type_0, label %switch.default_0 [i32 0, label %a_0 i32 1, label %b_0]
a_0:
  %0 = getelementptr %program, ptr %eclair_program_0, i32 0, i32 1
  br label %for_begin_0
for_begin_0:
  %1 = phi i32 [0, %a_0], [%5, %for_body_0]
  %2 = icmp ult i32 %1, %fact_count_0
  br i1 %2, label %for_body_0, label %for_end_0
for_body_0:
  %3 = getelementptr [1 x i32], ptr %memory_0, i32 %1
  %4 = call ccc i1 @eclair_btree_insert_value_0(ptr %0, ptr %3)
  %5 = add i32 1, %1
  br label %for_begin_0
for_end_0:
  br label %end_0
b_0:
  %6 = getelementptr %program, ptr %eclair_program_0, i32 0, i32 2
  br label %for_begin_1
for_begin_1:
  %7 = phi i32 [0, %b_0], [%11, %for_body_1]
  %8 = icmp ult i32 %7, %fact_count_0
  br i1 %8, label %for_body_1, label %for_end_1
for_body_1:
  %9 = getelementptr [3 x i32], ptr %memory_0, i32 %7
  %10 = call ccc i1 @eclair_btree_insert_value_1(ptr %6, ptr %9)
  %11 = add i32 1, %7
  br label %for_begin_1
for_end_1:
  br label %end_0
switch.default_0:
  ret void
end_0:
  ret void
}
//--- expected_eclair_get_facts_llvm.out
define external ccc ptr @eclair_get_facts(ptr %eclair_program_0, i32 %fact_type_0) "wasm-export-name"="eclair_get_facts" {
start:
  %stack.ptr_0 = alloca i32, i32 1
  %stack.ptr_1 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_2 = alloca %btree_iterator_t_0, i32 1
  %stack.ptr_3 = alloca i32, i32 1
  %stack.ptr_4 = alloca %btree_iterator_t_1, i32 1
  %stack.ptr_5 = alloca %btree_iterator_t_1, i32 1
  switch i32 %fact_type_0, label %switch.default_0 [i32 0, label %a_0 i32 1, label %b_0]
a_0:
  %0 = getelementptr %program, ptr %eclair_program_0, i32 0, i32 1
  %1 = call ccc i64 @eclair_btree_size_0(ptr %0)
  %2 = trunc i64 %1 to i32
  %3 = mul i32 %2, 4
  %4 = call ccc ptr @malloc(i32 %3)
  store i32 0, ptr %stack.ptr_0
  call ccc void @eclair_btree_begin_0(ptr %0, ptr %stack.ptr_1)
  call ccc void @eclair_btree_end_0(ptr %0, ptr %stack.ptr_2)
  br label %while_begin_0
while_begin_0:
  %5 = call ccc i1 @eclair_btree_iterator_is_equal_0(ptr %stack.ptr_1, ptr %stack.ptr_2)
  %6 = select i1 %5, i1 0, i1 1
  br i1 %6, label %while_body_0, label %while_end_0
while_body_0:
  %7 = load i32, ptr %stack.ptr_0
  %8 = getelementptr [1 x i32], ptr %4, i32 %7
  %9 = call ccc ptr @eclair_btree_iterator_current_0(ptr %stack.ptr_1)
  %10 = getelementptr [1 x i32], ptr %9, i32 0
  %11 = load [1 x i32], ptr %10
  %12 = getelementptr [1 x i32], ptr %8, i32 0
  store [1 x i32] %11, ptr %12
  %13 = add i32 %7, 1
  store i32 %13, ptr %stack.ptr_0
  call ccc void @eclair_btree_iterator_next_0(ptr %stack.ptr_1)
  br label %while_begin_0
while_end_0:
  ret ptr %4
b_0:
  %14 = getelementptr %program, ptr %eclair_program_0, i32 0, i32 2
  %15 = call ccc i64 @eclair_btree_size_1(ptr %14)
  %16 = trunc i64 %15 to i32
  %17 = mul i32 %16, 12
  %18 = call ccc ptr @malloc(i32 %17)
  store i32 0, ptr %stack.ptr_3
  call ccc void @eclair_btree_begin_1(ptr %14, ptr %stack.ptr_4)
  call ccc void @eclair_btree_end_1(ptr %14, ptr %stack.ptr_5)
  br label %while_begin_1
while_begin_1:
  %19 = call ccc i1 @eclair_btree_iterator_is_equal_1(ptr %stack.ptr_4, ptr %stack.ptr_5)
  %20 = select i1 %19, i1 0, i1 1
  br i1 %20, label %while_body_1, label %while_end_1
while_body_1:
  %21 = load i32, ptr %stack.ptr_3
  %22 = getelementptr [3 x i32], ptr %18, i32 %21
  %23 = call ccc ptr @eclair_btree_iterator_current_1(ptr %stack.ptr_4)
  %24 = getelementptr [3 x i32], ptr %23, i32 0
  %25 = load [3 x i32], ptr %24
  %26 = getelementptr [3 x i32], ptr %22, i32 0
  store [3 x i32] %25, ptr %26
  %27 = add i32 %21, 1
  store i32 %27, ptr %stack.ptr_3
  call ccc void @eclair_btree_iterator_next_1(ptr %stack.ptr_4)
  br label %while_begin_1
while_end_1:
  ret ptr %18
switch.default_0:
  ret ptr zeroinitializer
}
